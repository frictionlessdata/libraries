(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{113:function(e,a,t){"use strict";t.d(a,"a",(function(){return m})),t.d(a,"b",(function(){return h}));var n=t(0),r=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function c(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?c(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var b=r.a.createContext({}),o=function(e){var a=r.a.useContext(b),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},m=function(e){var a=o(e.components);return r.a.createElement(b.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},d=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),m=o(t),d=n,h=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return t?r.a.createElement(h,l(l({ref:a},b),{},{components:t})):r.a.createElement(h,l({ref:a},b))}));function h(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,c=new Array(i);c[0]=d;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var b=2;b<i;b++)c[b]=t[b];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},89:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return l})),t.d(a,"metadata",(function(){return s})),t.d(a,"toc",(function(){return b})),t.d(a,"default",(function(){return m}));var n=t(3),r=t(8),i=(t(0),t(113)),c=["components"],l={title:"tableschema-rb"},s={unversionedId:"table-schema/ruby",id:"table-schema/ruby",isDocsHomePage:!1,title:"tableschema-rb",description:"Build",source:"@site/docs/table-schema/ruby.md",slug:"/table-schema/ruby",permalink:"/docs/table-schema/ruby",editUrl:"https://github.com/frictionlessdata/libraries/edit/master/docs/docs/table-schema/ruby.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1643180439,formattedLastUpdatedAt:"1/26/2022",sidebar:"table-schema",previous:{title:"tableschema-js",permalink:"/docs/table-schema/javascript"},next:{title:"tableschema-php",permalink:"/docs/table-schema/php"}},b=[{value:"Installation",id:"installation",children:[{value:"Update from <code>jsontableschema</code>",id:"update-from-jsontableschema",children:[]}]},{value:"Usage",id:"usage",children:[{value:"Parse a CSV",id:"parse-a-csv",children:[]},{value:"Infer a schema",id:"infer-a-schema",children:[]},{value:"Build a Schema",id:"build-a-schema",children:[]},{value:"Validate a schema",id:"validate-a-schema",children:[]}]},{value:"Field",id:"field",children:[]},{value:"Development",id:"development",children:[]},{value:"Contributing",id:"contributing",children:[]},{value:"License",id:"license",children:[]}],o={toc:b};function m(e){var a=e.components,t=Object(r.a)(e,c);return Object(i.b)("wrapper",Object(n.a)({},o,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/tableschema-rb/actions"},Object(i.b)("img",{parentName:"a",src:"https://img.shields.io/github/workflow/status/frictionlessdata/tableschema-rb/general/main",alt:"Build"})),"\n",Object(i.b)("a",{parentName:"p",href:"https://codecov.io/gh/frictionlessdata/tableschema-rb"},Object(i.b)("img",{parentName:"a",src:"https://img.shields.io/codecov/c/github/frictionlessdata/tableschema-rb/main",alt:"Coverage"})),"\n",Object(i.b)("a",{parentName:"p",href:"https://rubygems.org/gems/tableschema"},Object(i.b)("img",{parentName:"a",src:"http://img.shields.io/gem/v/tableschema.svg",alt:"Release"})),"\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/tableschema-rb"},Object(i.b)("img",{parentName:"a",src:"https://img.shields.io/badge/codebase-github-brightgreen",alt:"Codebase"})),"\n",Object(i.b)("a",{parentName:"p",href:"https://discordapp.com/invite/Sewv6av"},Object(i.b)("img",{parentName:"a",src:"https://img.shields.io/badge/support-discord-brightgreen",alt:"Support"}))),Object(i.b)("p",null,"A utility library for working with ",Object(i.b)("a",{parentName:"p",href:"https://specs.frictionlessdata.io/table-schema/"},"Table Schema")," in Ruby."),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("p",null,"Add this line to your application's Gemfile:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"gem 'tableschema'\n")),Object(i.b)("p",null,"And then execute:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"$ bundle\n")),Object(i.b)("p",null,"Or install it yourself as:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"$ gem install tableschema\n")),Object(i.b)("h3",{id:"update-from-jsontableschema"},"Update from ",Object(i.b)("inlineCode",{parentName:"h3"},"jsontableschema")),Object(i.b)("p",null,"The library and its corresponding gem was previously called ",Object(i.b)("inlineCode",{parentName:"p"},"jsontableschema"),".\nSince version 0.3 the library was renamed ",Object(i.b)("inlineCode",{parentName:"p"},"tableschema")," and has a gem with the same name."),Object(i.b)("p",null,"The gem ",Object(i.b)("inlineCode",{parentName:"p"},"jsontableschema")," is no longer maintained. Here are the steps to transition your code to ",Object(i.b)("inlineCode",{parentName:"p"},"tableschema"),":"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Replace"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"gem 'jsontableschema'\n")),Object(i.b)("p",{parentName:"li"},"with"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"gem 'tableschema', '0.3.0'\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Replace module name ",Object(i.b)("inlineCode",{parentName:"p"},"JsonTableSchema")," with module name ",Object(i.b)("inlineCode",{parentName:"p"},"TableSchema"),". For example:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"JsonTableSchema::Table.new(source, schema: schema)\n")),Object(i.b)("p",{parentName:"li"},"with"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"TableSchema::Table.new(source, schema: schema)\n")))),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("h3",{id:"parse-a-csv"},"Parse a CSV"),Object(i.b)("p",null,"Validate and cast data from a CSV as described by a schema."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"schema = {\n    fields: [\n        {\n            name: 'id',\n            title: 'Identifier',\n            type: 'integer'\n        },\n        {\n            name: 'title',\n            title: 'Title',\n            type: 'string'\n        }\n    ]\n}\n\nsource = 'https://github.com/frictionlessdata/tableschema-rb/raw/master/spec/fixtures/simple_data.csv'\n\ntable = TableSchema::Table.new(source, schema: schema)\n\n# Iterate through rows\ntable.iter{ |row| print row }\n# [1, \"foo\"]\n# [2, \"bar\"]\n# [3, \"baz\"]\n\n# Read the entire CSV in memory\ntable.read\n#=> [[1,'foo'],[2,'bar'],[3,'baz']]\n")),Object(i.b)("p",null,"Both ",Object(i.b)("inlineCode",{parentName:"p"},"iter")," and ",Object(i.b)("inlineCode",{parentName:"p"},"read")," take the optional parameters:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"keyed"),": boolean, default: ",Object(i.b)("inlineCode",{parentName:"li"},"false")," - return the rows as Hashes with headers as keys"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"cast"),": boolean, default ",Object(i.b)("inlineCode",{parentName:"li"},"true")," - cast values for each row"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"limit"),": integer, default ",Object(i.b)("inlineCode",{parentName:"li"},"nil")," - stop at this many rows")),Object(i.b)("h3",{id:"infer-a-schema"},"Infer a schema"),Object(i.b)("p",null,"If you don't have a schema for a CSV, and want to generate one, you can infer a schema like so:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ruby"},'source = \'https://github.com/frictionlessdata/tableschema-rb/raw/master/spec/fixtures/simple_data.csv\' # Can also be a url or array of arrays\n\ntable = TableSchema::Table.new(source)\ntable.infer()\ntable.schema\n#=> {:fields=>[{:name=>"id", :title=>"", :description=>"", :type=>"integer", :format=>"default", :constraints=>{}}, {:name=>"title", :title=>"", :description=>"", :type=>"string", :format=>"default", :constraints=>{}}]}\n')),Object(i.b)("h3",{id:"build-a-schema"},"Build a Schema"),Object(i.b)("p",null,"You can also build a schema from scratch or modify an existing one:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"schema = TableSchema::Schema.new({\n  fields: [],\n})\n\n# Add a field\nschema.add_field({\n  name: 'id',\n  type: 'string',\n  constraints: {\n    required: true,\n  }\n})\n\n# Remove a field\nschema.remove_field('id')\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"add_field")," will ignore the updates if the updated version of the the schema fails ",Object(i.b)("a",{parentName:"p",href:"#validate-a-schema"},"validation"),".\nIf you wish to prevent an invalid schema from being created or updated by raising validation errors, you can pass the ",Object(i.b)("inlineCode",{parentName:"p"},"strict: true")," argument to the Schema initializer:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"schema = TableSchema::Schema.new(schema_hash, strict: true)\n")),Object(i.b)("p",null,"There are multiple methods to inspect a schema:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ruby"},'schema_hash = {\n  fields: [\n    {\n      name: \'id\',\n      type: \'string\',\n      constraints: {\n        required: true,\n      },\n    },\n    {\n      name: \'height\',\n      type: \'number\',\n    },\n    {\n      name: \'state\',\n    },\n  ],\n  primaryKey: \'id\',\n  foreignKeys: [\n    {\n      fields: \'state\',\n      reference: {\n          resource: \'the-resource\',\n          fields: \'state_id\',\n      },\n    },\n  ]\n}\nschema = TableSchema::Schema.new(schema_hash)\n\nschema.field_names\n#=> ["id", "height"]\nschema.fields\n#=> [{:name=>"id", :type=>"string", :constraints=>{:required=>true}, :format=>"default"}, {:name=>"height", :type=>"number", :format=>"default", :constraints=>{}}]\nschema.primary_key\n#=> ["id"]\nschema.foreign_keys\n# => [{:fields=>"state", :reference=>{:resource=>"the-resource", :fields=>"state_id"}}]\nschema.get_field(\'id\')\n# => {:name=>"id", :type=>"string", :constraints=>{:required=>true}, :format=>"default"}\n')),Object(i.b)("h4",{id:"cast-row"},"Cast row"),Object(i.b)("p",null,"To check if a given set of values complies with the schema, you can use ",Object(i.b)("inlineCode",{parentName:"p"},"cast_row"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"schema.cast_row(['string', '10.0', 'State'])\n#=> ['string', 10.0, 'State']\n")),Object(i.b)("p",null,"By default the converter will fail on the first error it finds. However, by passing ",Object(i.b)("inlineCode",{parentName:"p"},"fail_fast: false")," as the second argument the errors will be collected into an ",Object(i.b)("inlineCode",{parentName:"p"},"exception.errors")," attribute for you to review later. For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"row = [3, 'nan', 'State']\n\nschema.cast_row(row)\n#=> TableSchema::InvalidCast: 3 is not a string\nbegin\n  schema.cast_row(row, fail_fast: false)\nrescue TableSchema::MultipleInvalid => exception\n  exception.errors\nend\n#=> #<Set: {#<TableSchema::InvalidCast: 3 is not a string>,\n            #<TableSchema::InvalidCast: nan is not a number>}>\n")),Object(i.b)("h3",{id:"validate-a-schema"},"Validate a schema"),Object(i.b)("p",null,"To make sure a schema complies with ",Object(i.b)("a",{parentName:"p",href:"https://specs.frictionlessdata.io/table-schema"},"Table Schema spec"),", we validate each custom schema against the\nofficial ",Object(i.b)("a",{parentName:"p",href:"https://specs.frictionlessdata.io/schemas/table-schema.json"},"Table Schema schema"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"schema_hash = {\n  fields: [\n      { name: 'id' },\n  ]\n}\nschema = TableSchema::Schema.new(schema_hash)\nschema.validate\n#=> true\n")),Object(i.b)("p",null,"If the schema is invalid, you can access the errors via the ",Object(i.b)("inlineCode",{parentName:"p"},"errors")," attribute"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"schema_hash = {\n  fields: [\n    {\n      name: 'id',\n      title: 'Identifier',\n      type: 'integer'\n    },\n    {\n      name: 'title',\n      title: 'Title',\n      type: 'string'\n    }\n  ],\n  primaryKey: 'identifier'\n}\n\nschema = TableSchema::Schema.new(schema_hash)\nschema.validate\n#=> false\nschema.errors\n#=> #<Set: {\"The TableSchema primaryKey value `identifier` is not found in any of the schema's field names\"}>\n\n# Raise error if validation fails\nschema.validate!\n#=> TableSchema::SchemaException: The TableSchema primaryKey value `identifier` is not found in any of the schema's field names\n")),Object(i.b)("h2",{id:"field"},"Field"),Object(i.b)("p",null,"Data values can be cast to native Ruby objects with a Field instance. This allows formats and constraints to be defined for the field in the ",Object(i.b)("a",{parentName:"p",href:"https://specs.frictionlessdata.io/table-schema/#field-descriptors"},"field descriptor"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"# Init field\nfield = TableSchema::Field.new({\n  name: 'over_1700',\n  type: 'number',\n  constraints: {\n    minimum: '1700',\n  },\n})\n\n# Cast a value\nfield.cast_value('12345')\n#=> 12345.0\n")),Object(i.b)("p",null,"Casting a value will check the value is of the expected ",Object(i.b)("inlineCode",{parentName:"p"},"type"),", is in the correct ",Object(i.b)("inlineCode",{parentName:"p"},"format"),", and complies with any ",Object(i.b)("inlineCode",{parentName:"p"},"constraints")," imposed in the descriptor."),Object(i.b)("p",null,"Value that can't be cast will raise an ",Object(i.b)("inlineCode",{parentName:"p"},"InvalidCast")," exception."),Object(i.b)("p",null,"Casting a value that doesn't meet the constraints will raise a ",Object(i.b)("inlineCode",{parentName:"p"},"ConstraintError")," exception."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ruby"},"field.cast_value('nan')\n#=> TableSchema::InvalidCast: nan is not a number\nfield.cast_value('1200')\n#=> TableSchema::ConstraintError: The field `over_1700` must not be less than 1700\n")),Object(i.b)("h2",{id:"development"},"Development"),Object(i.b)("p",null,"After checking out the repo, run ",Object(i.b)("inlineCode",{parentName:"p"},"bin/setup")," to install dependencies. Then, run ",Object(i.b)("inlineCode",{parentName:"p"},"rake spec")," to run the tests. You can also run ",Object(i.b)("inlineCode",{parentName:"p"},"bin/console")," for an interactive prompt that will allow you to experiment."),Object(i.b)("p",null,"To install this gem onto your local machine, run ",Object(i.b)("inlineCode",{parentName:"p"},"bundle exec rake install"),". To release a new version, update the version number in ",Object(i.b)("inlineCode",{parentName:"p"},"version.rb"),", and then run ",Object(i.b)("inlineCode",{parentName:"p"},"bundle exec rake release"),", which will create a git tag for the version, push git commits and tags, and push the ",Object(i.b)("inlineCode",{parentName:"p"},".gem")," file to ",Object(i.b)("a",{parentName:"p",href:"https://rubygems.org"},"rubygems.org"),"."),Object(i.b)("h2",{id:"contributing"},"Contributing"),Object(i.b)("p",null,"Bug reports and pull requests are welcome on GitHub at ",Object(i.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/tableschema-rb"},"https://github.com/frictionlessdata/tableschema-rb"),". This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the ",Object(i.b)("a",{parentName:"p",href:"http://contributor-covenant.org"},"Contributor Covenant")," code of conduct."),Object(i.b)("h2",{id:"license"},"License"),Object(i.b)("p",null,"The gem is available as open source under the terms of the ",Object(i.b)("a",{parentName:"p",href:"http://opensource.org/licenses/MIT"},"MIT License"),"."))}m.isMDXComponent=!0}}]);