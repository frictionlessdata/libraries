(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{114:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=r.a.createContext({}),p=function(e){var t=r.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=p(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,i=b(e,["components","mdxType","originalType","parentName"]),s=p(a),d=n,m=s["".concat(l,".").concat(d)]||s[d]||u[d]||c;return a?r.a.createElement(m,o(o({ref:t},i),{},{components:a})):r.a.createElement(m,o({ref:t},i))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,l=new Array(c);l[0]=d;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var i=2;i<c;i++)l[i]=a[i];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},87:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return b})),a.d(t,"toc",(function(){return i})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(8),c=(a(0),a(114)),l=["components"],o={title:"datapackage-py"},b={unversionedId:"data-package/python",id:"data-package/python",isDocsHomePage:!1,title:"datapackage-py",description:"Travis",source:"@site/docs/data-package/python.md",slug:"/data-package/python",permalink:"/docs/data-package/python",editUrl:"https://github.com/frictionlessdata/libraries/edit/master/docs/docs/data-package/python.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1623069663,formattedLastUpdatedAt:"6/7/2021",sidebar:"data-package",next:{title:"datapackage-js",permalink:"/docs/data-package/javascript"}},i=[{value:"Features",id:"features",children:[]},{value:"Contents",id:"contents",children:[]},{value:"Getting Started",id:"getting-started",children:[{value:"Installation",id:"installation",children:[]}]},{value:"Documentation",id:"documentation",children:[{value:"Introduction",id:"introduction",children:[]},{value:"Working with Package",id:"working-with-package",children:[]},{value:"Working with Resource",id:"working-with-resource",children:[]},{value:"Working with Group",id:"working-with-group",children:[]},{value:"Working with Profile",id:"working-with-profile",children:[]},{value:"Working with Foreign Keys",id:"working-with-foreign-keys",children:[]},{value:"Working with validate/infer",id:"working-with-validateinfer",children:[]},{value:"Frequently Asked Questions",id:"frequently-asked-questions",children:[]}]},{value:"API Reference",id:"api-reference",children:[{value:"<code>cli</code>",id:"cli",children:[]},{value:"<code>Package</code>",id:"package",children:[]},{value:"<code>Resource</code>",id:"resource",children:[]},{value:"<code>Group</code>",id:"group",children:[]},{value:"<code>Profile</code>",id:"profile",children:[]},{value:"<code>validate</code>",id:"validate",children:[]},{value:"<code>infer</code>",id:"infer",children:[]},{value:"<code>DataPackageException</code>",id:"datapackageexception",children:[]},{value:"<code>TableSchemaException</code>",id:"tableschemaexception",children:[]},{value:"<code>LoadError</code>",id:"loaderror",children:[]},{value:"<code>CastError</code>",id:"casterror",children:[]},{value:"<code>IntegrityError</code>",id:"integrityerror",children:[]},{value:"<code>RelationError</code>",id:"relationerror",children:[]},{value:"<code>StorageError</code>",id:"storageerror",children:[]}]},{value:"Contributing",id:"contributing",children:[]},{value:"Changelog",id:"changelog",children:[]}],p={toc:i};function s(e){var t=e.components,a=Object(r.a)(e,l);return Object(c.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://travis-ci.org/frictionlessdata/datapackage-py"},Object(c.b)("img",{parentName:"a",src:"https://travis-ci.org/frictionlessdata/datapackage-py.svg?branch=master",alt:"Travis"})),"\n",Object(c.b)("a",{parentName:"p",href:"https://coveralls.io/github/frictionlessdata/datapackage-py?branch=master"},Object(c.b)("img",{parentName:"a",src:"https://coveralls.io/repos/github/frictionlessdata/datapackage-py/badge.svg?branch=master",alt:"Coveralls"})),"\n",Object(c.b)("a",{parentName:"p",href:"https://pypi.python.org/pypi/datapackage"},Object(c.b)("img",{parentName:"a",src:"https://img.shields.io/pypi/v/datapackage.svg",alt:"PyPi"})),"\n",Object(c.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/datapackage-py"},Object(c.b)("img",{parentName:"a",src:"https://img.shields.io/badge/github-master-brightgreen",alt:"Github"})),"\n",Object(c.b)("a",{parentName:"p",href:"https://gitter.im/frictionlessdata/chat"},Object(c.b)("img",{parentName:"a",src:"https://img.shields.io/gitter/room/frictionlessdata/chat.svg",alt:"Gitter"}))),Object(c.b)("p",null,"A library for working with ",Object(c.b)("a",{parentName:"p",href:"http://specs.frictionlessdata.io/data-package/"},"Data Packages"),"."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},Object(c.b)("strong",{parentName:"p"},"[Important Notice]")," We have released ",Object(c.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/frictionless-py"},"Frictionless Framework"),". This framework provides improved ",Object(c.b)("inlineCode",{parentName:"p"},"datapackage")," functionality extended to be a complete data solution. The change in not breaking for the existing software so no actions are required. Please read the ",Object(c.b)("a",{parentName:"p",href:"https://framework.frictionlessdata.io/docs/development/migration"},"Migration Guide")," from ",Object(c.b)("inlineCode",{parentName:"p"},"datapackage")," to Frictionless Framework."),Object(c.b)("ul",{parentName:"blockquote"},Object(c.b)("li",{parentName:"ul"},"we continue to bug-fix ",Object(c.b)("inlineCode",{parentName:"li"},"datapackage@1.x")," in this ",Object(c.b)("a",{parentName:"li",href:"https://github.com/frictionlessdata/datapackage-py"},"repository")," as well as it's available on ",Object(c.b)("a",{parentName:"li",href:"https://pypi.org/project/datapackage/"},"PyPi")," as it was before"),Object(c.b)("li",{parentName:"ul"},"please note that ",Object(c.b)("inlineCode",{parentName:"li"},"frictionless@3.x")," version's API, we're working on at the moment, is not stable"),Object(c.b)("li",{parentName:"ul"},"we will release ",Object(c.b)("inlineCode",{parentName:"li"},"frictionless@4.x")," by the end of 2020 to be the first SemVer/stable version"))),Object(c.b)("h2",{id:"features"},"Features"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"Package")," class for working with data packages"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"Resource")," class for working with data resources"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"Profile")," class for working with profiles"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"validate")," function for validating data package descriptors"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"infer")," function for inferring data package descriptors")),Object(c.b)("h2",{id:"contents"},"Contents"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#getting-started"},"Getting Started"),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#installation"},"Installation")))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#documentation"},"Documentation"),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#introduction"},"Introduction")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#working-with-package"},"Working with Package")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#working-with-resource"},"Working with Resource")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#working-with-group"},"Working with Group")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#working-with-profile"},"Working with Profile")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#working-with-foreign-keys"},"Working with Foreign Keys")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#working-with-validateinfer"},"Working with validate/infer")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#frequently-asked-questions"},"Frequently Asked Questions")))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#api-reference"},"API Reference"),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#cli"},Object(c.b)("inlineCode",{parentName:"a"},"cli"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#package"},Object(c.b)("inlineCode",{parentName:"a"},"Package"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#resource"},Object(c.b)("inlineCode",{parentName:"a"},"Resource"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#group"},Object(c.b)("inlineCode",{parentName:"a"},"Group"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#profile"},Object(c.b)("inlineCode",{parentName:"a"},"Profile"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#validate"},Object(c.b)("inlineCode",{parentName:"a"},"validate"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#infer"},Object(c.b)("inlineCode",{parentName:"a"},"infer"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#datapackageexception"},Object(c.b)("inlineCode",{parentName:"a"},"DataPackageException"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#tableschemaexception"},Object(c.b)("inlineCode",{parentName:"a"},"TableSchemaException"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#loaderror"},Object(c.b)("inlineCode",{parentName:"a"},"LoadError"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#casterror"},Object(c.b)("inlineCode",{parentName:"a"},"CastError"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#integrityerror"},Object(c.b)("inlineCode",{parentName:"a"},"IntegrityError"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#relationerror"},Object(c.b)("inlineCode",{parentName:"a"},"RelationError"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#storageerror"},Object(c.b)("inlineCode",{parentName:"a"},"StorageError"))))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#contributing"},"Contributing")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#changelog"},"Changelog"))),Object(c.b)("h2",{id:"getting-started"},"Getting Started"),Object(c.b)("h3",{id:"installation"},"Installation"),Object(c.b)("p",null,"The package use semantic versioning. It means that major versions  could include breaking changes. It's highly recommended to specify ",Object(c.b)("inlineCode",{parentName:"p"},"datapackage")," version range in your ",Object(c.b)("inlineCode",{parentName:"p"},"setup/requirements")," file e.g. ",Object(c.b)("inlineCode",{parentName:"p"},"datapackage>=1.0,<2.0"),"."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"$ pip install datapackage\n")),Object(c.b)("h4",{id:"osx-1014"},"OSX 10.14+"),Object(c.b)("p",null,"If you receive an error about the ",Object(c.b)("inlineCode",{parentName:"p"},"cchardet")," package when installing datapackage on Mac OSX 10.14 (Mojave) or higher, follow these steps:"),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"Make sure you have the latest x-code by running the following in terminal: ",Object(c.b)("inlineCode",{parentName:"li"},"xcode-select --install")),Object(c.b)("li",{parentName:"ol"},"Then go to ",Object(c.b)("a",{parentName:"li",href:"https://developer.apple.com/download/more/"},"https://developer.apple.com/download/more/")," and download the ",Object(c.b)("inlineCode",{parentName:"li"},"command line tools"),". Note, this requires an Apple ID."),Object(c.b)("li",{parentName:"ol"},"Then, in terminal, run ",Object(c.b)("inlineCode",{parentName:"li"},"open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg"),"\nYou can read more about these steps in this ",Object(c.b)("a",{parentName:"li",href:"https://stackoverflow.com/questions/52509602/cant-compile-c-program-on-a-mac-after-upgrade-to-mojave"},"post."))),Object(c.b)("h2",{id:"documentation"},"Documentation"),Object(c.b)("h3",{id:"introduction"},"Introduction"),Object(c.b)("p",null,"Let's start with a simple example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"from datapackage import Package\n\npackage = Package('datapackage.json')\npackage.get_resource('resource').read()\n")),Object(c.b)("h3",{id:"working-with-package"},"Working with Package"),Object(c.b)("p",null,"A class for working with data packages. It provides various capabilities like loading local or remote data package, inferring a data package descriptor, saving a data package descriptor and many more."),Object(c.b)("p",null,"Consider we have some local csv files in a ",Object(c.b)("inlineCode",{parentName:"p"},"data")," directory. Let's create a data package based on this data using a ",Object(c.b)("inlineCode",{parentName:"p"},"Package")," class:"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"data/cities.csv")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-csv"},'city,location\nlondon,"51.50,-0.11"\nparis,"48.85,2.30"\nrome,"41.89,12.51"\n')),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"data/population.csv")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-csv"},"city,year,population\nlondon,2017,8780000\nparis,2017,2240000\nrome,2017,2860000\n")),Object(c.b)("p",null,"First we create a blank data package:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package = Package()\n")),Object(c.b)("p",null,"Now we're ready to infer a data package descriptor based on data files we have. Because we have two csv files we use glob pattern ",Object(c.b)("inlineCode",{parentName:"p"},"**/*.csv"),":"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package.infer('**/*.csv')\npackage.descriptor\n#{ profile: 'tabular-data-package',\n#  resources:\n#   [ { path: 'data/cities.csv',\n#       profile: 'tabular-data-resource',\n#       encoding: 'utf-8',\n#       name: 'cities',\n#       format: 'csv',\n#       mediatype: 'text/csv',\n#       schema: [Object] },\n#     { path: 'data/population.csv',\n#       profile: 'tabular-data-resource',\n#       encoding: 'utf-8',\n#       name: 'population',\n#       format: 'csv',\n#       mediatype: 'text/csv',\n#       schema: [Object] } ] }\n")),Object(c.b)("p",null,"An ",Object(c.b)("inlineCode",{parentName:"p"},"infer")," method has found all our files and inspected it to extract useful metadata like profile, encoding, format, Table Schema etc. Let's tweak it a little bit:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package.descriptor['resources'][1]['schema']['fields'][1]['type'] = 'year'\npackage.commit()\npackage.valid # true\n")),Object(c.b)("p",null,"Because our resources are tabular we could read it as a tabular data:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package.get_resource('population').read(keyed=True)\n#[ { city: 'london', year: 2017, population: 8780000 },\n#  { city: 'paris', year: 2017, population: 2240000 },\n#  { city: 'rome', year: 2017, population: 2860000 } ]\n")),Object(c.b)("p",null,"Let's save our descriptor on the disk as a zip-file:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package.save('datapackage.zip')\n")),Object(c.b)("p",null,"To continue the work with the data package we just load it again but this time using local ",Object(c.b)("inlineCode",{parentName:"p"},"datapackage.zip"),":"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package = Package('datapackage.zip')\n# Continue the work\n")),Object(c.b)("p",null,"It was onle basic introduction to the ",Object(c.b)("inlineCode",{parentName:"p"},"Package")," class. To learn more let's take a look on ",Object(c.b)("inlineCode",{parentName:"p"},"Package")," class API reference."),Object(c.b)("h3",{id:"working-with-resource"},"Working with Resource"),Object(c.b)("p",null,"A class for working with data resources. You can read or iterate tabular resources using the ",Object(c.b)("inlineCode",{parentName:"p"},"iter/read")," methods and all resource as bytes using ",Object(c.b)("inlineCode",{parentName:"p"},"row_iter/row_read")," methods."),Object(c.b)("p",null,"Consider we have some local csv file. It could be inline data or remote link - all supported by ",Object(c.b)("inlineCode",{parentName:"p"},"Resource")," class (except local files for in-brower usage of course). But say it's ",Object(c.b)("inlineCode",{parentName:"p"},"data.csv")," for now:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-csv"},'city,location\nlondon,"51.50,-0.11"\nparis,"48.85,2.30"\nrome,N/A\n')),Object(c.b)("p",null,"Let's create and read a resource. Because resource is tabular we could use ",Object(c.b)("inlineCode",{parentName:"p"},"resource.read")," method with a ",Object(c.b)("inlineCode",{parentName:"p"},"keyed")," option to get an array of keyed rows:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource = Resource({path: 'data.csv'})\nresource.tabular # true\nresource.read(keyed=True)\n# [\n#   {city: 'london', location: '51.50,-0.11'},\n#   {city: 'paris', location: '48.85,2.30'},\n#   {city: 'rome', location: 'N/A'},\n# ]\nresource.headers\n# ['city', 'location']\n# (reading has to be started first)\n")),Object(c.b)("p",null,"As we could see our locations are just a strings. But it should be geopoints. Also Rome's location is not available but it's also just a ",Object(c.b)("inlineCode",{parentName:"p"},"N/A")," string instead of Python ",Object(c.b)("inlineCode",{parentName:"p"},"None"),". First we have to infer resource metadata:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.infer()\nresource.descriptor\n#{ path: 'data.csv',\n#  profile: 'tabular-data-resource',\n#  encoding: 'utf-8',\n#  name: 'data',\n#  format: 'csv',\n#  mediatype: 'text/csv',\n# schema: { fields: [ [Object], [Object] ], missingValues: [ '' ] } }\nresource.read(keyed=True)\n# Fails with a data validation error\n")),Object(c.b)("p",null,"Let's fix not available location. There is a ",Object(c.b)("inlineCode",{parentName:"p"},"missingValues")," property in Table Schema specification. As a first try we set ",Object(c.b)("inlineCode",{parentName:"p"},"missingValues")," to ",Object(c.b)("inlineCode",{parentName:"p"},"N/A")," in ",Object(c.b)("inlineCode",{parentName:"p"},"resource.descriptor.schema"),". Resource descriptor could be changed in-place but all changes should be commited by ",Object(c.b)("inlineCode",{parentName:"p"},"resource.commit()"),":"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.descriptor['schema']['missingValues'] = 'N/A'\nresource.commit()\nresource.valid # False\nresource.errors\n# [<ValidationError: \"'N/A' is not of type 'array'\">]\n")),Object(c.b)("p",null,"As a good citiziens we've decided to check out recource descriptor validity. And it's not valid! We should use an array for ",Object(c.b)("inlineCode",{parentName:"p"},"missingValues")," property. Also don't forget to have an empty string as a missing value:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.descriptor['schema']['missingValues'] = ['', 'N/A']\nresource.commit()\nresource.valid # true\n")),Object(c.b)("p",null,"All good. It looks like we're ready to read our data again:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.read(keyed=True)\n# [\n#   {city: 'london', location: [51.50,-0.11]},\n#   {city: 'paris', location: [48.85,2.30]},\n#   {city: 'rome', location: null},\n# ]\n")),Object(c.b)("p",null,"Now we see that:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"locations are arrays with numeric lattide and longitude"),Object(c.b)("li",{parentName:"ul"},"Rome's location is a native JavaScript ",Object(c.b)("inlineCode",{parentName:"li"},"null"))),Object(c.b)("p",null,"And because there are no errors on data reading we could be sure that our data is valid againt our schema. Let's save our resource descriptor:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.save('dataresource.json')\n")),Object(c.b)("p",null,"Let's check newly-crated ",Object(c.b)("inlineCode",{parentName:"p"},"dataresource.json"),". It contains path to our data file, inferred metadata and our ",Object(c.b)("inlineCode",{parentName:"p"},"missingValues")," tweak:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-json"},'{\n    "path": "data.csv",\n    "profile": "tabular-data-resource",\n    "encoding": "utf-8",\n    "name": "data",\n    "format": "csv",\n    "mediatype": "text/csv",\n    "schema": {\n        "fields": [\n            {\n                "name": "city",\n                "type": "string",\n                "format": "default"\n            },\n            {\n                "name": "location",\n                "type": "geopoint",\n                "format": "default"\n            }\n        ],\n        "missingValues": [\n            "",\n            "N/A"\n        ]\n    }\n}\n')),Object(c.b)("p",null,"If we decide to improve it even more we could update the ",Object(c.b)("inlineCode",{parentName:"p"},"dataresource.json")," file and then open it again using local file name:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource = Resource('dataresource.json')\n# Continue the work\n")),Object(c.b)("p",null,"It was onle basic introduction to the ",Object(c.b)("inlineCode",{parentName:"p"},"Resource")," class. To learn more let's take a look on ",Object(c.b)("inlineCode",{parentName:"p"},"Resource")," class API reference."),Object(c.b)("h3",{id:"working-with-group"},"Working with Group"),Object(c.b)("p",null,"A class representing a group of tabular resources. Groups can be used to read multiple resource as one or to export them, for example, to a database as one table. To define a group add the ",Object(c.b)("inlineCode",{parentName:"p"},"group: <name>")," field to corresponding resources. The group's metadata will be created from the \"leading\" resource's metadata (the first resource with the group name)."),Object(c.b)("p",null,"Consider we have a data package with two tables partitioned by a year and a shared schema stored separately:"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"}," cars-2017.csv")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-csv"},"name,value\nbmw,2017\ntesla,2017\nnissan,2017\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"}," cars-2018.csv")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-csv"},"name,value\nbmw,2018\ntesla,2018\nnissan,2018\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"cars.schema.json")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-json"},'{\n    "fields": [\n        {\n            "name": "name",\n            "type": "string"\n        },\n        {\n            "name": "value",\n            "type": "integer"\n        }\n    ]\n}\n')),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"datapackage.json")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "datapackage",\n    "resources": [\n        {\n            "group": "cars",\n            "name": "cars-2017",\n            "path": "cars-2017.csv",\n            "profile": "tabular-data-resource",\n            "schema": "cars.schema.json"\n        },\n        {\n            "group": "cars",\n            "name": "cars-2018",\n            "path": "cars-2018.csv",\n            "profile": "tabular-data-resource",\n            "schema": "cars.schema.json"\n        }\n    ]\n}\n')),Object(c.b)("p",null,"Let's read the resources separately:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package = Package('datapackage.json')\npackage.get_resource('cars-2017').read(keyed=True) == [\n    {'name': 'bmw', 'value': 2017},\n    {'name': 'tesla', 'value': 2017},\n    {'name': 'nissan', 'value': 2017},\n]\npackage.get_resource('cars-2018').read(keyed=True) == [\n    {'name': 'bmw', 'value': 2018},\n    {'name': 'tesla', 'value': 2018},\n    {'name': 'nissan', 'value': 2018},\n]\n")),Object(c.b)("p",null,"On the other hand, these resources defined with a ",Object(c.b)("inlineCode",{parentName:"p"},"group: cars")," field. It means we can treat them as a group:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package = Package('datapackage.json')\npackage.get_group('cars').read(keyed=True) == [\n    {'name': 'bmw', 'value': 2017},\n    {'name': 'tesla', 'value': 2017},\n    {'name': 'nissan', 'value': 2017},\n    {'name': 'bmw', 'value': 2018},\n    {'name': 'tesla', 'value': 2018},\n    {'name': 'nissan', 'value': 2018},\n]\n")),Object(c.b)("p",null,"We can use this approach when we need to save the data package to a storage, for example, to a SQL database. There is the ",Object(c.b)("inlineCode",{parentName:"p"},"merge_groups")," flag to enable groupping behaviour:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package = Package('datapackage.json')\npackage.save(storage='sql', engine=engine)\n# SQL tables:\n# - cars-2017\n# - cars-2018\npackage.save(storage='sql', engine=engine, merge_groups=True)\n# SQL tables:\n# - cars\n")),Object(c.b)("h3",{id:"working-with-profile"},"Working with Profile"),Object(c.b)("p",null,"A component to represent JSON Schema profile from ",Object(c.b)("a",{parentName:"p",href:"https://specs.frictionlessdata.io/schemas/registry.json"},"Profiles Registry"),":"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"profile = Profile('data-package')\n\nprofile.name # data-package\nprofile.jsonschema # JSON Schema contents\n\ntry:\n   valid = profile.validate(descriptor)\nexcept exceptions.ValidationError as exception:\n   for error in exception.errors:\n       # handle individual error\n")),Object(c.b)("h3",{id:"working-with-foreign-keys"},"Working with Foreign Keys"),Object(c.b)("p",null,"The library supports foreign keys described in the ",Object(c.b)("a",{parentName:"p",href:"http://specs.frictionlessdata.io/table-schema/#foreign-keys"},"Table Schema")," specification. It means if your data package descriptor use ",Object(c.b)("inlineCode",{parentName:"p"},"resources[].schema.foreignKeys")," property for some resources a data integrity will be checked on reading operations."),Object(c.b)("p",null,"Consider we have a data package:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"DESCRIPTOR = {\n  'resources': [\n    {\n      'name': 'teams',\n      'data': [\n        ['id', 'name', 'city'],\n        ['1', 'Arsenal', 'London'],\n        ['2', 'Real', 'Madrid'],\n        ['3', 'Bayern', 'Munich'],\n      ],\n      'schema': {\n        'fields': [\n          {'name': 'id', 'type': 'integer'},\n          {'name': 'name', 'type': 'string'},\n          {'name': 'city', 'type': 'string'},\n        ],\n        'foreignKeys': [\n          {\n            'fields': 'city',\n            'reference': {'resource': 'cities', 'fields': 'name'},\n          },\n        ],\n      },\n    }, {\n      'name': 'cities',\n      'data': [\n        ['name', 'country'],\n        ['London', 'England'],\n        ['Madrid', 'Spain'],\n      ],\n    },\n  ],\n}\n")),Object(c.b)("p",null,"Let's check relations for a ",Object(c.b)("inlineCode",{parentName:"p"},"teams")," resource:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"from datapackage import Package\n\npackage = Package(DESCRIPTOR)\nteams = package.get_resource('teams')\nteams.check_relations()\n# tableschema.exceptions.RelationError: Foreign key \"['city']\" violation in row \"4\"\n")),Object(c.b)("p",null,"As we could see there is a foreign key violation. That's because our lookup table ",Object(c.b)("inlineCode",{parentName:"p"},"cities")," doesn't have a city of ",Object(c.b)("inlineCode",{parentName:"p"},"Munich")," but we have a team from there. We need to fix it in ",Object(c.b)("inlineCode",{parentName:"p"},"cities")," resource:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package.descriptor['resources'][1]['data'].append(['Munich', 'Germany'])\npackage.commit()\nteams = package.get_resource('teams')\nteams.check_relations()\n# True\n")),Object(c.b)("p",null,"Fixed! But not only a check operation is available. We could use ",Object(c.b)("inlineCode",{parentName:"p"},"relations")," argument for ",Object(c.b)("inlineCode",{parentName:"p"},"resource.iter/read")," methods to dereference a resource relations:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"teams.read(keyed=True, relations=True)\n#[{'id': 1, 'name': 'Arsenal', 'city': {'name': 'London', 'country': 'England}},\n# {'id': 2, 'name': 'Real', 'city': {'name': 'Madrid', 'country': 'Spain}},\n# {'id': 3, 'name': 'Bayern', 'city': {'name': 'Munich', 'country': 'Germany}}]\n")),Object(c.b)("p",null,"Instead of plain city name we've got a dictionary containing a city data. These ",Object(c.b)("inlineCode",{parentName:"p"},"resource.iter/read")," methods will fail with the same as ",Object(c.b)("inlineCode",{parentName:"p"},"resource.check_relations")," error if there is an integrity issue. But only if ",Object(c.b)("inlineCode",{parentName:"p"},"relations=True")," flag is passed."),Object(c.b)("h3",{id:"working-with-validateinfer"},"Working with validate/infer"),Object(c.b)("p",null,"A standalone function to validate a data package descriptor:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"from datapackage import validate, exceptions\n\ntry:\n    valid = validate(descriptor)\nexcept exceptions.ValidationError as exception:\n   for error in exception.errors:\n       # handle individual error\n")),Object(c.b)("p",null,"A standalone function to infer a data package descriptor."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"descriptor = infer('**/*.csv')\n#{ profile: 'tabular-data-resource',\n#  resources:\n#   [ { path: 'data/cities.csv',\n#       profile: 'tabular-data-resource',\n#       encoding: 'utf-8',\n#       name: 'cities',\n#       format: 'csv',\n#       mediatype: 'text/csv',\n#       schema: [Object] },\n#     { path: 'data/population.csv',\n#       profile: 'tabular-data-resource',\n#       encoding: 'utf-8',\n#       name: 'population',\n#       format: 'csv',\n#       mediatype: 'text/csv',\n#       schema: [Object] } ] }\n")),Object(c.b)("h3",{id:"frequently-asked-questions"},"Frequently Asked Questions"),Object(c.b)("h4",{id:"accessing-data-behind-a-proxy-server"},"Accessing data behind a proxy server?"),Object(c.b)("p",null,"Before the ",Object(c.b)("inlineCode",{parentName:"p"},'package = Package("https://xxx.json")')," call set these environment variables:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"import os\n\nos.environ[\"HTTP_PROXY\"] = 'xxx'\nos.environ[\"HTTPS_PROXY\"] = 'xxx'\n")),Object(c.b)("h2",{id:"api-reference"},"API Reference"),Object(c.b)("h3",{id:"cli"},Object(c.b)("inlineCode",{parentName:"h3"},"cli")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"cli()\n")),Object(c.b)("p",null,"Command-line interface"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"Usage: datapackage [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  infer\n  validate\n")),Object(c.b)("h3",{id:"package"},Object(c.b)("inlineCode",{parentName:"h3"},"Package")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"Package(self,\n        descriptor=None,\n        base_path=None,\n        strict=False,\n        unsafe=False,\n        storage=None,\n        schema=None,\n        default_base_path=None,\n        **options)\n")),Object(c.b)("p",null,"Package representation"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"descriptor (str/dict)"),": data package descriptor as local path, url or object"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"base_path (str)"),": base path for all relative paths"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"strict (bool)"),": strict flag to alter validation behavior.\nSetting it to ",Object(c.b)("inlineCode",{parentName:"li"},"True")," leads to throwing errors\non any operation with invalid descriptor"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"unsafe (bool)"),":\nif ",Object(c.b)("inlineCode",{parentName:"li"},"True")," unsafe paths will be allowed. For more inforamtion\n",Object(c.b)("a",{parentName:"li",href:"https://specs.frictionlessdata.io/data-resource/#data-location"},"https://specs.frictionlessdata.io/data-resource/#data-location"),".\nDefault to ",Object(c.b)("inlineCode",{parentName:"li"},"False")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"storage (str/tableschema.Storage)"),": storage name like ",Object(c.b)("inlineCode",{parentName:"li"},"sql")," or storage instance"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"options (dict)"),": storage options to use for storage creation")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DataPackageException"),": raises error if something goes wrong")),Object(c.b)("h4",{id:"packagebase_path"},Object(c.b)("inlineCode",{parentName:"h4"},"package.base_path")),Object(c.b)("p",null,"Package's base path"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"str/None"),": returns the data package base path"),Object(c.b)("h4",{id:"packagedescriptor"},Object(c.b)("inlineCode",{parentName:"h4"},"package.descriptor")),Object(c.b)("p",null,"Package's descriptor"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"dict"),": descriptor"),Object(c.b)("h4",{id:"packageerrors"},Object(c.b)("inlineCode",{parentName:"h4"},"package.errors")),Object(c.b)("p",null,"Validation errors"),Object(c.b)("p",null,"Always empty in strict mode."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Exception[]"),": validation errors"),Object(c.b)("h4",{id:"packageprofile"},Object(c.b)("inlineCode",{parentName:"h4"},"package.profile")),Object(c.b)("p",null,"Package's profile"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Profile"),": an instance of ",Object(c.b)("inlineCode",{parentName:"p"},"Profile")," class"),Object(c.b)("h4",{id:"packageresource_names"},Object(c.b)("inlineCode",{parentName:"h4"},"package.resource_names")),Object(c.b)("p",null,"Package's resource names"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"str[]"),": returns an array of resource names"),Object(c.b)("h4",{id:"packageresources"},Object(c.b)("inlineCode",{parentName:"h4"},"package.resources")),Object(c.b)("p",null,"Package's resources"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Resource[]"),": returns an array of ",Object(c.b)("inlineCode",{parentName:"p"},"Resource")," instances"),Object(c.b)("h4",{id:"packagevalid"},Object(c.b)("inlineCode",{parentName:"h4"},"package.valid")),Object(c.b)("p",null,"Validation status"),Object(c.b)("p",null,"Always true in strict mode."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": validation status"),Object(c.b)("h4",{id:"packageget_resource"},Object(c.b)("inlineCode",{parentName:"h4"},"package.get_resource")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package.get_resource(name)\n")),Object(c.b)("p",null,"Get data package resource by name."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"name (str)"),": data resource name")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Resource/None"),": returns ",Object(c.b)("inlineCode",{parentName:"p"},"Resource")," instances or null if not found"),Object(c.b)("h4",{id:"packageadd_resource"},Object(c.b)("inlineCode",{parentName:"h4"},"package.add_resource")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package.add_resource(descriptor)\n")),Object(c.b)("p",null,"Add new resource to data package."),Object(c.b)("p",null,"The data package descriptor will be validated with newly added resource descriptor."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"descriptor (dict)"),": data resource descriptor")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DataPackageException"),": raises error if something goes wrong")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Resource/None"),": returns added ",Object(c.b)("inlineCode",{parentName:"p"},"Resource")," instance or null if not added"),Object(c.b)("h4",{id:"packageremove_resource"},Object(c.b)("inlineCode",{parentName:"h4"},"package.remove_resource")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package.remove_resource(name)\n")),Object(c.b)("p",null,"Remove data package resource by name."),Object(c.b)("p",null,"The data package descriptor will be validated after resource descriptor removal."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"name (str)"),": data resource name")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DataPackageException"),": raises error if something goes wrong")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Resource/None"),": returns removed ",Object(c.b)("inlineCode",{parentName:"p"},"Resource")," instances or null if not found"),Object(c.b)("h4",{id:"packageget_group"},Object(c.b)("inlineCode",{parentName:"h4"},"package.get_group")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package.get_group(name)\n")),Object(c.b)("p",null,"Returns a group of tabular resources by name."),Object(c.b)("p",null,"For more information about groups see ",Object(c.b)("a",{parentName:"p",href:"#group"},"Group"),"."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"name (str)"),": name of a group of resources")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DataPackageException"),": raises error if something goes wrong")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Group/None"),": returns a ",Object(c.b)("inlineCode",{parentName:"p"},"Group")," instance or null if not found"),Object(c.b)("h4",{id:"packageinfer"},Object(c.b)("inlineCode",{parentName:"h4"},"package.infer")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package.infer(pattern=False)\n")),Object(c.b)("p",null,"Infer a data package metadata."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Argument ",Object(c.b)("inlineCode",{parentName:"p"},"pattern")," works only for local files")),Object(c.b)("p",null,"If ",Object(c.b)("inlineCode",{parentName:"p"},"pattern")," is not provided only existent resources will be inferred\n(added metadata like encoding, profile etc). If ",Object(c.b)("inlineCode",{parentName:"p"},"pattern")," is provided\nnew resoures with file names mathing the pattern will be added and inferred.\nIt commits changes to data package instance."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"pattern (str)"),": glob pattern for new resources")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"dict"),": returns data package descriptor"),Object(c.b)("h4",{id:"packagecommit"},Object(c.b)("inlineCode",{parentName:"h4"},"package.commit")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package.commit(strict=None)\n")),Object(c.b)("p",null,"Update data package instance if there are in-place changes in the descriptor."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Example")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package = Package({\n    'name': 'package',\n    'resources': [{'name': 'resource', 'data': ['data']}]\n})\n\npackage.name # package\npackage.descriptor['name'] = 'renamed-package'\npackage.name # package\npackage.commit()\npackage.name # renamed-package\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"strict (bool)"),": alter ",Object(c.b)("inlineCode",{parentName:"li"},"strict")," mode for further work")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DataPackageException"),": raises error if something goes wrong")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns true on success and false if not modified"),Object(c.b)("h4",{id:"packagesave"},Object(c.b)("inlineCode",{parentName:"h4"},"package.save")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"package.save(target=None,\n             storage=None,\n             merge_groups=False,\n             to_base_path=False,\n             **options)\n")),Object(c.b)("p",null,"Saves this data package"),Object(c.b)("p",null,"It saves it to storage if ",Object(c.b)("inlineCode",{parentName:"p"},"storage")," argument is passed or\nsaves this data package's descriptor to json file if ",Object(c.b)("inlineCode",{parentName:"p"},"target")," arguments\nends with ",Object(c.b)("inlineCode",{parentName:"p"},".json")," or saves this data package to zip file otherwise."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Example")),Object(c.b)("p",null,"It creates a zip file into ",Object(c.b)("inlineCode",{parentName:"p"},"file_or_path")," with the contents\nof this Data Package and its resources. Every resource which content\nlives in the local filesystem will be copied to the zip file.\nConsider the following Data Package descriptor:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "gdp",\n    "resources": [\n        {"name": "local", "format": "CSV", "path": "data.csv"},\n        {"name": "inline", "data": [4, 8, 15, 16, 23, 42]},\n        {"name": "remote", "url": "http://someplace.com/data.csv"}\n    ]\n}\n')),Object(c.b)("p",null,"The final structure of the zip file will be:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"./datapackage.json\n./data/local.csv\n")),Object(c.b)("p",null,"With the contents of ",Object(c.b)("inlineCode",{parentName:"p"},"datapackage.json")," being the same as\nreturned ",Object(c.b)("inlineCode",{parentName:"p"},"datapackage.descriptor"),". The resources' file names are generated\nbased on their ",Object(c.b)("inlineCode",{parentName:"p"},"name")," and ",Object(c.b)("inlineCode",{parentName:"p"},"format")," fields if they exist.\nIf the resource has no ",Object(c.b)("inlineCode",{parentName:"p"},"name"),", it'll be used ",Object(c.b)("inlineCode",{parentName:"p"},"resource-X"),",\nwhere ",Object(c.b)("inlineCode",{parentName:"p"},"X")," is the index of the resource in the ",Object(c.b)("inlineCode",{parentName:"p"},"resources")," list (starting at zero).\nIf the resource has ",Object(c.b)("inlineCode",{parentName:"p"},"format"),", it'll be lowercased and appended to the ",Object(c.b)("inlineCode",{parentName:"p"},"name"),',\nbecoming "',Object(c.b)("inlineCode",{parentName:"p"},"name.format"),'".'),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"target (string/filelike)"),":\nthe file path or a file-like object where\nthe contents of this Data Package will be saved into."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"storage (str/tableschema.Storage)"),":\nstorage name like ",Object(c.b)("inlineCode",{parentName:"li"},"sql")," or storage instance"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"merge_groups (bool)"),":\nsave all the group's tabular resoruces into one bucket\nif a storage is provided (for example into one SQL table).\nRead more about ",Object(c.b)("a",{parentName:"li",href:"#group"},"Group"),"."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"to_base_path (bool)"),':\nsave the package to the package\'s base path\nusing the "base_path/target" route'),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"options (dict)"),":\nstorage options to use for storage creation")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DataPackageException"),": raises if there was some error writing the package")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool/Storage"),": on success return true or a ",Object(c.b)("inlineCode",{parentName:"p"},"Storage")," instance"),Object(c.b)("h3",{id:"resource"},Object(c.b)("inlineCode",{parentName:"h3"},"Resource")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"Resource(self,\n         descriptor={},\n         base_path=None,\n         strict=False,\n         unsafe=False,\n         storage=None,\n         package=None,\n         **options)\n")),Object(c.b)("p",null,"Resource represenation"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"descriptor (str/dict)"),": data resource descriptor as local path, url or object"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"base_path (str)"),": base path for all relative paths"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"strict (bool)"),":\nstrict flag to alter validation behavior.  Setting it to ",Object(c.b)("inlineCode",{parentName:"li"},"true"),"\nleads to throwing errors on any operation with invalid descriptor"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"unsafe (bool)"),":\nif ",Object(c.b)("inlineCode",{parentName:"li"},"True")," unsafe paths will be allowed. For more inforamtion\n",Object(c.b)("a",{parentName:"li",href:"https://specs.frictionlessdata.io/data-resource/#data-location"},"https://specs.frictionlessdata.io/data-resource/#data-location"),".\nDefault to ",Object(c.b)("inlineCode",{parentName:"li"},"False")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"storage (str/tableschema.Storage)"),": storage name like ",Object(c.b)("inlineCode",{parentName:"li"},"sql")," or storage instance"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"options (dict)"),": storage options to use for storage creation")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DataPackageException"),": raises error if something goes wrong")),Object(c.b)("h4",{id:"resourcedata"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.data")),Object(c.b)("p",null,"Return resource data"),Object(c.b)("h4",{id:"resourcedescriptor"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.descriptor")),Object(c.b)("p",null,"Package's descriptor"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"dict"),": descriptor"),Object(c.b)("h4",{id:"resourceerrors"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.errors")),Object(c.b)("p",null,"Validation errors"),Object(c.b)("p",null,"Always empty in strict mode."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Exception[]"),": validation errors"),Object(c.b)("h4",{id:"resourcegroup"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.group")),Object(c.b)("p",null,"Group name"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"str"),": group name"),Object(c.b)("h4",{id:"resourceheaders"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.headers")),Object(c.b)("p",null,"Resource's headers"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Only for tabular resources (reading has to be started first or it's ",Object(c.b)("inlineCode",{parentName:"p"},"None"),")")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"str[]/None"),": returns data source headers"),Object(c.b)("h4",{id:"resourceinline"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.inline")),Object(c.b)("p",null,"Whether resource inline"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns true if resource is inline"),Object(c.b)("h4",{id:"resourcelocal"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.local")),Object(c.b)("p",null,"Whether resource local"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns true if resource is local"),Object(c.b)("h4",{id:"resourcemultipart"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.multipart")),Object(c.b)("p",null,"Whether resource multipart"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns true if resource is multipart"),Object(c.b)("h4",{id:"resourcename"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.name")),Object(c.b)("p",null,"Resource name"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"str"),": name"),Object(c.b)("h4",{id:"resourcepackage"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.package")),Object(c.b)("p",null,"Package instance if the resource belongs to some package"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Package/None"),": a package instance if available"),Object(c.b)("h4",{id:"resourceprofile"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.profile")),Object(c.b)("p",null,"Resource's profile"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Profile"),": an instance of ",Object(c.b)("inlineCode",{parentName:"p"},"Profile")," class"),Object(c.b)("h4",{id:"resourceremote"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.remote")),Object(c.b)("p",null,"Whether resource remote"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns true if resource is remote"),Object(c.b)("h4",{id:"resourceschema"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.schema")),Object(c.b)("p",null,"Resource's schema"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Only for tabular resources")),Object(c.b)("p",null,"For tabular resources it returns ",Object(c.b)("inlineCode",{parentName:"p"},"Schema")," instance to interact with data schema.\nRead API documentation - ",Object(c.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/tableschema-py#schema"},"tableschema.Schema"),"."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"tableschema.Schema"),": schema"),Object(c.b)("h4",{id:"resourcesource"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.source")),Object(c.b)("p",null,"Resource's source"),Object(c.b)("p",null,"Combination of ",Object(c.b)("inlineCode",{parentName:"p"},"resource.source")," and ",Object(c.b)("inlineCode",{parentName:"p"},"resource.inline/local/remote/multipart"),"\nprovides predictable interface to work with resource data."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"list/str"),": returns ",Object(c.b)("inlineCode",{parentName:"p"},"data")," or ",Object(c.b)("inlineCode",{parentName:"p"},"path")," property"),Object(c.b)("h4",{id:"resourcetable"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.table")),Object(c.b)("p",null,"Return resource table"),Object(c.b)("h4",{id:"resourcetabular"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.tabular")),Object(c.b)("p",null,"Whether resource tabular"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns true if resource is tabular"),Object(c.b)("h4",{id:"resourcevalid"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.valid")),Object(c.b)("p",null,"Validation status"),Object(c.b)("p",null,"Always true in strict mode."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": validation status"),Object(c.b)("h4",{id:"resourceiter"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.iter")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.iter(integrity=False, relations=False, **options)\n")),Object(c.b)("p",null,"Iterates through the resource data and emits rows cast based on table schema."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Only for tabular resources")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'keyed (bool):\n    yield keyed rows in a form of `{header1: value1, header2: value2}`\n    (default is false; the form of rows is `[value1, value2]`)\n\nextended (bool):\n    yield extended rows in a for of `[rowNumber, [header1, header2], [value1, value2]]`\n    (default is false; the form of rows is `[value1, value2]`)\n\ncast (bool):\n    disable data casting if false\n    (default is true)\n\nintegrity (bool):\n    if true actual size in BYTES and SHA256 hash of the file\n    will be checked against `descriptor.bytes` and `descriptor.hash`\n    (other hashing algorithms are not supported and will be skipped silently)\n\nrelations (bool):\n    if true foreign key fields will be checked and resolved to its references\n\nforeign_keys_values (dict):\n    three-level dictionary of foreign key references optimized\n    to speed up validation process in a form of\n    `{resource1: {(fk_field1, fk_field2): {(value1, value2): {one_keyedrow}, ... }}}`.\n    If not provided but relations is true, it will be created\n    before the validation process by *index_foreign_keys_values* method\n\nexc_handler (func):\n    optional custom exception handler callable.\n    Can be used to defer raising errors (i.e. "fail late"), e.g.\n    for data validation purposes. Must support the signature below\n')),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Custom exception handler")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"def exc_handler(exc, row_number=None, row_data=None, error_data=None):\n    '''Custom exception handler (example)\n\n    # Arguments:\n        exc(Exception):\n            Deferred exception instance\n        row_number(int):\n            Data row number that triggers exception exc\n        row_data(OrderedDict):\n            Invalid data row source data\n        error_data(OrderedDict):\n            Data row source data field subset responsible for the error, if\n            applicable (e.g. invalid primary or foreign key fields). May be\n            identical to row_data.\n    '''\n    # ...\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DataPackageException"),": base class of any error"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"CastError"),": data cast error"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"IntegrityError"),": integrity checking error"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"UniqueKeyError"),": unique key constraint violation"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"UnresolvedFKError"),": unresolved foreign key reference error")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Iterator[list]"),": yields rows"),Object(c.b)("h4",{id:"resourceread"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.read")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.read(integrity=False,\n              relations=False,\n              foreign_keys_values=False,\n              **options)\n")),Object(c.b)("p",null,"Read the whole resource and return as array of rows"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Only for tabular resources\nIt has the same API as ",Object(c.b)("inlineCode",{parentName:"p"},"resource.iter")," except for")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"limit (int)"),": limit count of rows to read and return")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"list[]"),": returns rows"),Object(c.b)("h4",{id:"resourcecheck_integrity"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.check_integrity")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.check_integrity()\n")),Object(c.b)("p",null,"Checks resource integrity"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Only for tabular resources")),Object(c.b)("p",null,"It checks size in BYTES and SHA256 hash of the file\nagainst ",Object(c.b)("inlineCode",{parentName:"p"},"descriptor.bytes")," and ",Object(c.b)("inlineCode",{parentName:"p"},"descriptor.hash"),"\n(other hashing algorithms are not supported and will be skipped silently)."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"exceptions.IntegrityError"),": raises if there are integrity issues")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns True if no issues"),Object(c.b)("h4",{id:"resourcecheck_relations"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.check_relations")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.check_relations(foreign_keys_values=False)\n")),Object(c.b)("p",null,"Check relations"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Only for tabular resources")),Object(c.b)("p",null,"It checks foreign keys and raises an exception if there are integrity issues."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"exceptions.RelationError"),": raises if there are relation issues")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns True if no issues"),Object(c.b)("h4",{id:"resourcedrop_relations"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.drop_relations")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.drop_relations()\n")),Object(c.b)("p",null,"Drop relations"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Only for tabular resources")),Object(c.b)("p",null,"Remove relations data from memory"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns True"),Object(c.b)("h4",{id:"resourceraw_iter"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.raw_iter")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.raw_iter(stream=False)\n")),Object(c.b)("p",null,"Iterate over data chunks as bytes."),Object(c.b)("p",null,"If ",Object(c.b)("inlineCode",{parentName:"p"},"stream")," is true File-like object will be returned."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"stream (bool)"),": File-like object will be returned")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bytes[]/filelike"),": returns bytes[]/filelike"),Object(c.b)("h4",{id:"resourceraw_read"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.raw_read")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.raw_read()\n")),Object(c.b)("p",null,"Returns resource data as bytes."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bytes"),": returns resource data in bytes"),Object(c.b)("h4",{id:"resourceinfer"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.infer")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.infer(**options)\n")),Object(c.b)("p",null,"Infer resource metadata"),Object(c.b)("p",null,"Like name, format, mediatype, encoding, schema and profile.\nIt commits this changes into resource instance."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"options"),":\noptions will be passed to ",Object(c.b)("inlineCode",{parentName:"li"},"tableschema.infer")," call,\nfor more control on results (e.g. for setting ",Object(c.b)("inlineCode",{parentName:"li"},"limit"),", ",Object(c.b)("inlineCode",{parentName:"li"},"confidence")," etc.).")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"dict"),": returns resource descriptor"),Object(c.b)("h4",{id:"resourcecommit"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.commit")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.commit(strict=None)\n")),Object(c.b)("p",null,"Update resource instance if there are in-place changes in the descriptor."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"strict (bool)"),": alter ",Object(c.b)("inlineCode",{parentName:"li"},"strict")," mode for further work")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DataPackageException"),": raises error if something goes wrong")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns true on success and false if not modified"),Object(c.b)("h4",{id:"resourcesave"},Object(c.b)("inlineCode",{parentName:"h4"},"resource.save")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"resource.save(target, storage=None, to_base_path=False, **options)\n")),Object(c.b)("p",null,"Saves this resource"),Object(c.b)("p",null,"Into storage if ",Object(c.b)("inlineCode",{parentName:"p"},"storage")," argument is passed or\nsaves this resource's descriptor to json file otherwise."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"target (str)"),":\npath where to save a resource"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"storage (str/tableschema.Storage)"),":\nstorage name like ",Object(c.b)("inlineCode",{parentName:"li"},"sql")," or storage instance"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"to_base_path (bool)"),':\nsave the resource to the resource\'s base path\nusing the "base_path/target" route'),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"options (dict)"),":\nstorage options to use for storage creation")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DataPackageException"),": raises error if something goes wrong")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns true on success\nBuilding index...\nStarted generating documentation..."),Object(c.b)("h3",{id:"group"},Object(c.b)("inlineCode",{parentName:"h3"},"Group")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"Group(self, resources)\n")),Object(c.b)("p",null,"Group representation"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Resource[]"),": list of TABULAR resources")),Object(c.b)("h4",{id:"groupheaders"},Object(c.b)("inlineCode",{parentName:"h4"},"group.headers")),Object(c.b)("p",null,"Group's headers"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"str[]/None"),": returns headers"),Object(c.b)("h4",{id:"groupname"},Object(c.b)("inlineCode",{parentName:"h4"},"group.name")),Object(c.b)("p",null,"Group name"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"str"),": name"),Object(c.b)("h4",{id:"groupschema"},Object(c.b)("inlineCode",{parentName:"h4"},"group.schema")),Object(c.b)("p",null,"Resource's schema"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"tableschema.Schema"),": schema"),Object(c.b)("h4",{id:"groupiter"},Object(c.b)("inlineCode",{parentName:"h4"},"group.iter")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"group.iter(**options)\n")),Object(c.b)("p",null,"Iterates through the group data and emits rows cast based on table schema."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"It concatenates all the resources and has the same API as ",Object(c.b)("inlineCode",{parentName:"p"},"resource.iter"))),Object(c.b)("h4",{id:"groupread"},Object(c.b)("inlineCode",{parentName:"h4"},"group.read")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"group.read(limit=None, **options)\n")),Object(c.b)("p",null,"Read the whole group and return as array of rows"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"It concatenates all the resources and has the same API as ",Object(c.b)("inlineCode",{parentName:"p"},"resource.read"))),Object(c.b)("h4",{id:"groupcheck_relations"},Object(c.b)("inlineCode",{parentName:"h4"},"group.check_relations")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"group.check_relations()\n")),Object(c.b)("p",null,"Check group's relations"),Object(c.b)("p",null,"The same as ",Object(c.b)("inlineCode",{parentName:"p"},"resource.check_relations")," but without the optional\nargument ",Object(c.b)("em",{parentName:"p"},"foreign_keys_values"),".  This method will test foreignKeys of the\nwhole group at once otpimizing the process by creating the foreign_key_values\nhashmap only once before testing the set of resources."),Object(c.b)("h3",{id:"profile"},Object(c.b)("inlineCode",{parentName:"h3"},"Profile")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"Profile(self, profile)\n")),Object(c.b)("p",null,"Profile representation"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"profile (str)"),": profile name in registry or URL to JSON Schema")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DataPackageException"),": raises error if something goes wrong")),Object(c.b)("h4",{id:"profilejsonschema"},Object(c.b)("inlineCode",{parentName:"h4"},"profile.jsonschema")),Object(c.b)("p",null,"JSONSchema content"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"dict"),": returns profile's JSON Schema contents"),Object(c.b)("h4",{id:"profilename"},Object(c.b)("inlineCode",{parentName:"h4"},"profile.name")),Object(c.b)("p",null,"Profile name"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"str/None"),": name if available"),Object(c.b)("h4",{id:"profilevalidate"},Object(c.b)("inlineCode",{parentName:"h4"},"profile.validate")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"profile.validate(descriptor)\n")),Object(c.b)("p",null,"Validate a data package ",Object(c.b)("inlineCode",{parentName:"p"},"descriptor")," against the profile."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"descriptor (dict)"),": retrieved and dereferenced data package descriptor")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"ValidationError"),": raises if not valid\n",Object(c.b)("strong",{parentName:"li"},"Returns"))),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns True if valid"),Object(c.b)("h3",{id:"validate"},Object(c.b)("inlineCode",{parentName:"h3"},"validate")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"validate(descriptor)\n")),Object(c.b)("p",null,"Validate a data package descriptor."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"descriptor (str/dict)"),": package descriptor (one of):",Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",{parentName:"pre"},"- local path\n- remote url\n- object\n")))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Raises")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"ValidationError"),": raises on invalid")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": returns true on valid"),Object(c.b)("h3",{id:"infer"},Object(c.b)("inlineCode",{parentName:"h3"},"infer")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"infer(pattern, base_path=None)\n")),Object(c.b)("p",null,"Infer a data package descriptor."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Argument ",Object(c.b)("inlineCode",{parentName:"p"},"pattern")," works only for local files")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"pattern (str)"),": glob file pattern")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"dict"),": returns data package descriptor"),Object(c.b)("h3",{id:"datapackageexception"},Object(c.b)("inlineCode",{parentName:"h3"},"DataPackageException")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"DataPackageException(self, message, errors=[])\n")),Object(c.b)("p",null,"Base class for all DataPackage/TableSchema exceptions."),Object(c.b)("p",null,"If there are multiple errors, they can be read from the exception object:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"try:\n    # lib action\nexcept DataPackageException as exception:\n    if exception.multiple:\n        for error in exception.errors:\n            # handle error\n")),Object(c.b)("h4",{id:"datapackageexceptionerrors"},Object(c.b)("inlineCode",{parentName:"h4"},"datapackageexception.errors")),Object(c.b)("p",null,"List of nested errors"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"DataPackageException[]"),": list of nested errors"),Object(c.b)("h4",{id:"datapackageexceptionmultiple"},Object(c.b)("inlineCode",{parentName:"h4"},"datapackageexception.multiple")),Object(c.b)("p",null,"Whether it's a nested exception"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bool"),": whether it's a nested exception"),Object(c.b)("h3",{id:"tableschemaexception"},Object(c.b)("inlineCode",{parentName:"h3"},"TableSchemaException")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"TableSchemaException(self, message, errors=[])\n")),Object(c.b)("p",null,"Base class for all TableSchema exceptions."),Object(c.b)("h3",{id:"loaderror"},Object(c.b)("inlineCode",{parentName:"h3"},"LoadError")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"LoadError(self, message, errors=[])\n")),Object(c.b)("p",null,"All loading errors."),Object(c.b)("h3",{id:"casterror"},Object(c.b)("inlineCode",{parentName:"h3"},"CastError")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"CastError(self, message, errors=[])\n")),Object(c.b)("p",null,"All value cast errors."),Object(c.b)("h3",{id:"integrityerror"},Object(c.b)("inlineCode",{parentName:"h3"},"IntegrityError")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"IntegrityError(self, message, errors=[])\n")),Object(c.b)("p",null,"All integrity errors."),Object(c.b)("h3",{id:"relationerror"},Object(c.b)("inlineCode",{parentName:"h3"},"RelationError")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"RelationError(self, message, errors=[])\n")),Object(c.b)("p",null,"All relations errors."),Object(c.b)("h3",{id:"storageerror"},Object(c.b)("inlineCode",{parentName:"h3"},"StorageError")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"StorageError(self, message, errors=[])\n")),Object(c.b)("p",null,"All storage errors."),Object(c.b)("h2",{id:"contributing"},"Contributing"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"The project follows the ",Object(c.b)("a",{parentName:"p",href:"https://github.com/okfn/coding-standards"},"Open Knowledge International coding standards"),".")),Object(c.b)("p",null,"Recommended way to get started is to create and activate a project virtual environment.\nTo install package and development dependencies into active environment:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"$ make install\n")),Object(c.b)("p",null,"To run tests with linting and coverage:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"$ make test\n")),Object(c.b)("h2",{id:"changelog"},"Changelog"),Object(c.b)("p",null,"Here described only breaking and the most important changes. The full changelog and documentation for all released versions could be found in nicely formatted ",Object(c.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/datapackage-py/commits/master"},"commit history"),"."),Object(c.b)("h4",{id:"v115"},"v1.15"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"WARNING: it can be breaking for some setups, please read the discussions below")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Fixed header management according to the specs:",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"https://github.com/frictionlessdata/datapackage-py/pull/257"},"https://github.com/frictionlessdata/datapackage-py/pull/257")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"https://github.com/frictionlessdata/datapackage-py/issues/256"},"https://github.com/frictionlessdata/datapackage-py/issues/256")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"https://github.com/frictionlessdata/forum/issues/1"},"https://github.com/frictionlessdata/forum/issues/1"))))),Object(c.b)("h4",{id:"v114"},"v1.14"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Add experimental options for pick/skiping fileds/rows")),Object(c.b)("h4",{id:"v113"},"v1.13"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Add ",Object(c.b)("inlineCode",{parentName:"li"},"unsafe")," option to Package and Resource (#262)")),Object(c.b)("h4",{id:"v112"},"v1.12"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Use ",Object(c.b)("inlineCode",{parentName:"li"},"chardet")," for encoding deteciton by default. For ",Object(c.b)("inlineCode",{parentName:"li"},"cchardet"),": ",Object(c.b)("inlineCode",{parentName:"li"},"pip install datapackage[cchardet]"))),Object(c.b)("h4",{id:"v111"},"v1.11"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"resource/package.save")," now accept a ",Object(c.b)("inlineCode",{parentName:"li"},"to_base_path")," argument (#254)"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"package.save")," now returns a ",Object(c.b)("inlineCode",{parentName:"li"},"Storage")," instance if available")),Object(c.b)("h4",{id:"v110"},"v1.10"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Added an ability to check tabular resource's integrity")),Object(c.b)("h4",{id:"v19"},"v1.9"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Added ",Object(c.b)("inlineCode",{parentName:"li"},"resource.package")," property")),Object(c.b)("h4",{id:"v18"},"v1.8"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Added support for ",Object(c.b)("a",{parentName:"li",href:"#group"},"groups of resources"))),Object(c.b)("h4",{id:"v17"},"v1.7"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Added support for ",Object(c.b)("a",{parentName:"li",href:"https://frictionlessdata.io/specs/patterns/#compression-of-resources"},"compression of resources"))),Object(c.b)("h4",{id:"v16"},"v1.6"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Added support for custom request session")),Object(c.b)("h4",{id:"v15"},"v1.5"),Object(c.b)("p",null,"Updated behaviour:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Added support for Python 3.7")),Object(c.b)("h4",{id:"v14"},"v1.4"),Object(c.b)("p",null,"New API added:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"added ",Object(c.b)("inlineCode",{parentName:"li"},"skip_rows")," support to the resource descriptor")),Object(c.b)("h4",{id:"v13"},"v1.3"),Object(c.b)("p",null,"New API added:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"property ",Object(c.b)("inlineCode",{parentName:"li"},"package.base_path")," is now publicly available")),Object(c.b)("h4",{id:"v12"},"v1.2"),Object(c.b)("p",null,"Updated behaviour:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"CLI command ",Object(c.b)("inlineCode",{parentName:"li"},"$ datapackage infer")," now outputs only a JSON-formatted data package descriptor.")),Object(c.b)("h4",{id:"v11"},"v1.1"),Object(c.b)("p",null,"New API added:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Added an integration between ",Object(c.b)("inlineCode",{parentName:"li"},"Package/Resource")," and the ",Object(c.b)("inlineCode",{parentName:"li"},"tableschema.Storage")," - ",Object(c.b)("a",{parentName:"li",href:"https://github.com/frictionlessdata/tableschema-py#storage"},"https://github.com/frictionlessdata/tableschema-py#storage"),". It allows to load and save data package from/to different storages like SQL/BigQuery/etc.")))}s.isMDXComponent=!0}}]);