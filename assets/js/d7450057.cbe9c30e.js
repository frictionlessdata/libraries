(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{106:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return o})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(8),i=(a(0),a(113)),l=["components"],b={title:"datapackage-r"},c={unversionedId:"data-package/rlang",id:"data-package/rlang",isDocsHomePage:!1,title:"datapackage-r",description:"CRAN\\Status\\Badge",source:"@site/docs/data-package/rlang.md",slug:"/data-package/rlang",permalink:"/docs/data-package/rlang",editUrl:"https://github.com/frictionlessdata/libraries/edit/master/docs/docs/data-package/rlang.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1629357112,formattedLastUpdatedAt:"8/19/2021",sidebar:"data-package",previous:{title:"datapackage-go",permalink:"/docs/data-package/go"},next:{title:"datapackage-jl",permalink:"/docs/data-package/julia"}},o=[{value:"Description",id:"description",children:[{value:"Features",id:"features",children:[]}]},{value:"Getting started",id:"getting-started",children:[{value:"Installation",id:"installation",children:[]},{value:"Load package",id:"load-package",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Documentation",id:"documentation",children:[{value:"Working with Package",id:"working-with-package",children:[]},{value:"Resource",id:"resource",children:[]}]},{value:"API Referencer",id:"api-referencer",children:[{value:"Package",id:"package",children:[]},{value:"Resource",id:"resource-1",children:[]},{value:"Profile",id:"profile",children:[]},{value:"validate(descriptor) \u21d2 <code>Object</code>",id:"validatedescriptor-\u21d2-object",children:[]},{value:"infer(pattern) \u21d2 <code>Object</code>",id:"inferpattern-\u21d2-object",children:[]},{value:"DataPackageError",id:"datapackageerror",children:[]},{value:"TableSchemaError",id:"tableschemaerror",children:[]}]},{value:"Contributing",id:"contributing",children:[]},{value:"Changelog - News",id:"changelog---news",children:[]}],p={toc:o};function s(e){var t=e.components,a=Object(r.a)(e,l);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://cran.r-project.org/package=datapackage.r"},Object(i.b)("img",{parentName:"a",src:"https://www.r-pkg.org/badges/version/datapackage.r",alt:"CRAN_Status_Badge"})),"\n",Object(i.b)("a",{parentName:"p",href:"https://travis-ci.org/frictionlessdata/datapackage-r"},Object(i.b)("img",{parentName:"a",src:"https://travis-ci.org/frictionlessdata/datapackage-r.svg?branch=master",alt:"Build Status"})),"\n",Object(i.b)("a",{parentName:"p",href:"https://coveralls.io/github/frictionlessdata/datapackage-r?branch=master"},Object(i.b)("img",{parentName:"a",src:"https://coveralls.io/repos/github/frictionlessdata/datapackage-r/badge.svg?branch=master",alt:"Coverage Status"})),"\n",Object(i.b)("a",{parentName:"p",href:"http://www.repostatus.org/#active"},Object(i.b)("img",{parentName:"a",src:"http://www.repostatus.org/badges/latest/active.svg",alt:"Project Status: Active \u2013 The project has reached a stable, usable state but is no longer being actively developed; support/maintenance will be provided as time allows."})),"\n",Object(i.b)("a",{parentName:"p",href:"https://cran.r-project.org/"},Object(i.b)("img",{parentName:"a",src:"https://img.shields.io/badge/R%3E%3D-3.6-6666ff.svg",alt:"minimal R version"})),"\n",Object(i.b)("a",{parentName:"p",href:"http://cran.rstudio.com/web/packages/datapackage.r/index.html"},Object(i.b)("img",{parentName:"a",src:"http://cranlogs.r-pkg.org/badges/grand-total/datapackage.r",alt:"Stats"})),"\n",Object(i.b)("a",{parentName:"p",href:"https://opensource.org/licenses/MIT"},Object(i.b)("img",{parentName:"a",src:"https://img.shields.io/badge/licence-MIT-blue.svg",alt:"Licence"})),"\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/datapackage-r"},Object(i.b)("img",{parentName:"a",src:"https://img.shields.io/badge/codebase-github-brightgreen",alt:"Codebase"})),"\n",Object(i.b)("a",{parentName:"p",href:"https://discordapp.com/invite/Sewv6av"},Object(i.b)("img",{parentName:"a",src:"https://img.shields.io/badge/support-discord-brightgreen",alt:"Support"}))),Object(i.b)("h2",{id:"description"},"Description"),Object(i.b)("p",null,"R package for working with ",Object(i.b)("a",{parentName:"p",href:"https://specs.frictionlessdata.io/data-package/"},"Frictionless Data\nPackage"),"."),Object(i.b)("h3",{id:"features"},"Features"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Package")," class for working with data packages"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Resource")," class for working with data resources"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Profile")," class for working with profiles"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"validate")," function for validating data package descriptors"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"infer")," function for inferring data package descriptors")),Object(i.b)("h2",{id:"getting-started"},"Getting started"),Object(i.b)("h3",{id:"installation"},"Installation"),Object(i.b)("p",null,"In order to install the latest distribution of ",Object(i.b)("a",{parentName:"p",href:"https://www.r-project.org/"},"R\nsoftware")," to your computer you have to\nselect one of the mirror sites of the ",Object(i.b)("a",{parentName:"p",href:"https://cran.r-project.org//"},"Comprehensive R Archive\nNetwork"),", select the appropriate link for\nyour operating system and follow the wizard instructions."),Object(i.b)("p",null,"For windows users you can:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Go to CRAN"),Object(i.b)("li",{parentName:"ol"},"Click download R for Windows"),Object(i.b)("li",{parentName:"ol"},"Click Base (This is what you want to install R for the first time)"),Object(i.b)("li",{parentName:"ol"},"Download the latest R version"),Object(i.b)("li",{parentName:"ol"},"Run installation file and follow the instrustions of the installer.")),Object(i.b)("p",null,"(Mac) OS X and Linux users may need to follow different steps depending\non their system version to install R successfully and it is recommended\nto read the instructions on CRAN site carefully."),Object(i.b)("p",null,"Even more detailed installation instructions can be found in ",Object(i.b)("a",{parentName:"p",href:"https://cran.r-project.org/doc/manuals/R-admin.html"},"R\nInstallation and Administration\nmanual"),"."),Object(i.b)("p",null,"To install ",Object(i.b)("a",{parentName:"p",href:"https://www.rstudio.com/"},"RStudio"),", you can download\n",Object(i.b)("a",{parentName:"p",href:"https://www.rstudio.com/products/rstudio/download/"},"RStudio Desktop"),"\nwith Open Source License and follow the wizard instructions:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Go to ",Object(i.b)("a",{parentName:"li",href:"https://www.rstudio.com/products/rstudio/"},"RStudio")),Object(i.b)("li",{parentName:"ol"},"Click download on RStudio Desktop"),Object(i.b)("li",{parentName:"ol"},"Download on RStudio Desktop free download"),Object(i.b)("li",{parentName:"ol"},"Select the appropriate file for your system"),Object(i.b)("li",{parentName:"ol"},"Run installation file")),Object(i.b)("p",null,"To install the ",Object(i.b)("inlineCode",{parentName:"p"},"datapackage")," package it is necessary to install first\n",Object(i.b)("a",{parentName:"p",href:"https://cran.r-project.org/package=devtools"},"devtools package")," to make\ninstallation of github packages available."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'# Install devtools package if not already\ninstall.packages("devtools")\n')),Object(i.b)("p",null,"Install ",Object(i.b)("inlineCode",{parentName:"p"},"datapackage.r")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'# And then install the development version from github\ndevtools::install_github("frictionlessdata/datapackage-r")\n')),Object(i.b)("h3",{id:"load-package"},"Load package"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"# load the package using\nlibrary(datapackage.r)\n")),Object(i.b)("h2",{id:"examples"},"Examples"),Object(i.b)("p",null,"Code examples in this readme requires R 3.3 or higher, You could see\neven more\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/datapackage-r/tree/master/vignettes"},"examples"),"\nin vignettes directory."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'descriptor <- \'{\n  "resources": [\n    {\n      "name": "example",\n      "profile": "tabular-data-resource",\n      "data": [\n        ["height", "age", "name"],\n        [180, 18, "Tony"],\n        [192, 32, "Jacob"]\n      ],\n      "schema":  {\n        "fields": [\n          {"name": "height", "type": "integer" },\n          {"name": "age", "type": "integer" },\n          {"name": "name", "type": "string" }\n        ]\n      }\n    }\n  ]\n}\'\n\ndataPackage <- Package.load(descriptor)\ndataPackage\n\n## <Package>\n##   Public:\n##     addResource: function (descriptor)\n##     clone: function (deep = FALSE)\n##     commit: function (strict = NULL)\n##     descriptor: active binding\n##     errors: active binding\n##     getResource: function (name)\n##     infer: function (pattern)\n##     initialize: function (descriptor = list(), basePath = NULL, strict = FALSE,\n##     profile: active binding\n##     removeResource: function (name)\n##     resourceNames: active binding\n##     resources: active binding\n##     save: function (target, type = "json")\n##     valid: active binding\n##   Private:\n##     basePath_: C:/Users/akis_/Documents/datapackage-r\n##     build_: function ()\n##     currentDescriptor_: list\n##     currentDescriptor_json: NULL\n##     descriptor_: NULL\n##     errors_: list\n##     nextDescriptor_: list\n##     pattern_: NULL\n##     profile_: Profile, R6\n##     resources_: list\n##     resources_length: NULL\n##     strict_: FALSE\n\nresource <- dataPackage$getResource(\'example\')\n# convert to json and add indentation with jsonlite prettify function\njsonlite::prettify(helpers.from.list.to.json(resource$read()))\n\n## [\n##     [\n##         180,\n##         18,\n##         "Tony"\n##     ],\n##     [\n##         192,\n##         32,\n##         "Jacob"\n##     ]\n## ]\n##\n')),Object(i.b)("h2",{id:"documentation"},"Documentation"),Object(i.b)("p",null,"Json objects are not included in R base data types. ",Object(i.b)("a",{parentName:"p",href:"https://CRAN.R-project.org/package=jsonlite"},"Jsonlite\npackage")," is internally used\nto convert json data to list objects. The input parameters of functions\ncould be json strings, files or lists and the outputs are in list format\nto easily further process your data in R environment and exported as\ndesired. The examples below show how to use jsonlite package to convert\nthe output back to json adding indentation whitespace. More details\nabout handling json you can see jsonlite documentation or vignettes\n",Object(i.b)("a",{parentName:"p",href:"https://CRAN.R-project.org/package=jsonlite"},"here"),"."),Object(i.b)("h3",{id:"working-with-package"},"Working with Package"),Object(i.b)("p",null,"A class for working with data packages. It provides various capabilities\nlike loading local or remote data package, inferring a data package\ndescriptor, saving a data package descriptor and many more."),Object(i.b)("p",null,"Consider we have some local ",Object(i.b)("inlineCode",{parentName:"p"},"csv")," files in a ",Object(i.b)("inlineCode",{parentName:"p"},"data")," directory. Let\u2019s\ncreate a data package based on this data using a ",Object(i.b)("inlineCode",{parentName:"p"},"Package")," class:"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"inst/extdata/readme","_","example/cities.csv")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'city,location\nlondon,"51.50,-0.11"\nparis,"48.85,2.30"\nrome,"41.89,12.51"\n')),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"inst/extdata/readme","_","example/population.csv")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"city,year,population\nlondon,2017,8780000\nparis,2017,2240000\nrome,2017,2860000\n")),Object(i.b)("p",null,"First we create a blank data package:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"dataPackage <- Package.load()\n")),Object(i.b)("p",null,"Now we\u2019re ready to infer a data package descriptor based on data files\nwe have. Because we have two csv files we use glob pattern ",Object(i.b)("inlineCode",{parentName:"p"},"csv"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'jsonlite::toJSON(dataPackage$infer(\'csv\'), pretty = TRUE)\n\n## {\n##   "profile": ["tabular-data-package"],\n##   "resources": [\n##     {\n##       "path": ["cities.csv"],\n##       "profile": ["tabular-data-resource"],\n##       "encoding": ["utf-8"],\n##       "name": ["cities"],\n##       "format": ["csv"],\n##       "mediatype": ["text/csv"],\n##       "schema": {\n##         "fields": [\n##           {\n##             "name": ["city"],\n##             "type": ["string"],\n##             "format": ["default"]\n##           },\n##           {\n##             "name": ["location"],\n##             "type": ["string"],\n##             "format": ["default"]\n##           }\n##         ],\n##         "missingValues": [\n##           [""]\n##         ]\n##       }\n##     },\n##     {\n##       "path": ["population.csv"],\n##       "profile": ["tabular-data-resource"],\n##       "encoding": ["utf-8"],\n##       "name": ["population"],\n##       "format": ["csv"],\n##       "mediatype": ["text/csv"],\n##       "schema": {\n##         "fields": [\n##           {\n##             "name": ["city"],\n##             "type": ["string"],\n##             "format": ["default"]\n##           },\n##           {\n##             "name": ["year"],\n##             "type": ["integer"],\n##             "format": ["default"]\n##           },\n##           {\n##             "name": ["population"],\n##             "type": ["integer"],\n##             "format": ["default"]\n##           }\n##         ],\n##         "missingValues": [\n##           [""]\n##         ]\n##       }\n##     }\n##   ]\n## }\n\njsonlite::toJSON(dataPackage$descriptor, pretty = TRUE)\n\n## {\n##   "profile": ["tabular-data-package"],\n##   "resources": [\n##     {\n##       "path": ["cities.csv"],\n##       "profile": ["tabular-data-resource"],\n##       "encoding": ["utf-8"],\n##       "name": ["cities"],\n##       "format": ["csv"],\n##       "mediatype": ["text/csv"],\n##       "schema": {\n##         "fields": [\n##           {\n##             "name": ["city"],\n##             "type": ["string"],\n##             "format": ["default"]\n##           },\n##           {\n##             "name": ["location"],\n##             "type": ["string"],\n##             "format": ["default"]\n##           }\n##         ],\n##         "missingValues": [\n##           [""]\n##         ]\n##       }\n##     },\n##     {\n##       "path": ["population.csv"],\n##       "profile": ["tabular-data-resource"],\n##       "encoding": ["utf-8"],\n##       "name": ["population"],\n##       "format": ["csv"],\n##       "mediatype": ["text/csv"],\n##       "schema": {\n##         "fields": [\n##           {\n##             "name": ["city"],\n##             "type": ["string"],\n##             "format": ["default"]\n##           },\n##           {\n##             "name": ["year"],\n##             "type": ["integer"],\n##             "format": ["default"]\n##           },\n##           {\n##             "name": ["population"],\n##             "type": ["integer"],\n##             "format": ["default"]\n##           }\n##         ],\n##         "missingValues": [\n##           [""]\n##         ]\n##       }\n##     }\n##   ]\n## }\n')),Object(i.b)("p",null,"An ",Object(i.b)("inlineCode",{parentName:"p"},"infer")," method has found all our files and inspected it to extract\nuseful metadata like profile, encoding, format, Table Schema etc. Let\u2019s\ntweak it a little bit:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"dataPackage$descriptor$resources[[2]]$schema$fields[[2]]$type <- 'year'\ndataPackage$commit()\n\n## [1] TRUE\n\ndataPackage$valid\n\n## [1] TRUE\n")),Object(i.b)("p",null,"Because our resources are tabular we could read it as a tabular data:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'jsonlite::toJSON(dataPackage$getResource("population")$read(keyed = TRUE),auto_unbox = FALSE,pretty = TRUE)\n\n## [\n##   {\n##     "city": ["london"],\n##     "year": [2017],\n##     "population": [8780000]\n##   },\n##   {\n##     "city": ["paris"],\n##     "year": [2017],\n##     "population": [2240000]\n##   },\n##   {\n##     "city": ["rome"],\n##     "year": [2017],\n##     "population": [2860000]\n##   }\n## ]\n')),Object(i.b)("p",null,"Let\u2019s save our descriptor on the disk. After it we could update our\n",Object(i.b)("inlineCode",{parentName:"p"},"datapackage.json")," as we want, make some changes etc:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"dataPackage.save('datapackage.json')\n")),Object(i.b)("p",null,"To continue the work with the data package we just load it again but\nthis time using local ",Object(i.b)("inlineCode",{parentName:"p"},"datapackage.json"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"dataPackage <- Package.load('datapackage.json')\n# Continue the work\n")),Object(i.b)("p",null,"It was one basic introduction to the ",Object(i.b)("inlineCode",{parentName:"p"},"Package")," class. To learn more\nlet\u2019s take a look on ",Object(i.b)("inlineCode",{parentName:"p"},"Package")," class API reference."),Object(i.b)("h3",{id:"resource"},"Resource"),Object(i.b)("p",null,"A class for working with data resources. You can read or iterate tabular\nresources using the ",Object(i.b)("inlineCode",{parentName:"p"},"iter/read")," methods and all resource as bytes using\n",Object(i.b)("inlineCode",{parentName:"p"},"rowIter/rowRead")," methods."),Object(i.b)("p",null,"Consider we have some local csv file. It could be inline data or remote\nlink - all supported by ",Object(i.b)("inlineCode",{parentName:"p"},"Resource")," class (except local files for\nin-brower usage of course). But say it\u2019s ",Object(i.b)("inlineCode",{parentName:"p"},"cities.csv")," for now:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'city,location\nlondon,"51.50,-0.11"\nparis,"48.85,2.30"\nrome,N/A\n')),Object(i.b)("p",null,"Let\u2019s create and read a resource. We use static ",Object(i.b)("inlineCode",{parentName:"p"},"Resource$load")," method\ninstantiate a resource. Because resource is tabular we could use\n",Object(i.b)("inlineCode",{parentName:"p"},"resourceread")," method with a ",Object(i.b)("inlineCode",{parentName:"p"},"keyed")," option to get an list of keyed\nrows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'resource <- Resource.load(\'{"path": "cities.csv"}\')\nresource$tabular\n\n## [1] TRUE\n\njsonlite::toJSON(resource$read(keyed = TRUE), pretty = TRUE)\n\n## [\n##   {\n##     "city": ["london"],\n##     "location": ["\\"51.50 -0.11\\""]\n##   },\n##   {\n##     "city": ["paris"],\n##     "location": ["\\"48.85 2.30\\""]\n##   },\n##   {\n##     "city": ["rome"],\n##     "location": ["\\"41.89 12.51\\""]\n##   }\n## ]\n')),Object(i.b)("p",null,"As we could see our locations are just a strings. But it should be\ngeopoints. Also Rome\u2019s location is not available but it\u2019s also just a\n",Object(i.b)("inlineCode",{parentName:"p"},"N/A")," string instead of ",Object(i.b)("inlineCode",{parentName:"p"},"null"),". First we have to infer resource\nmetadata:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'jsonlite::toJSON(resource$infer(), pretty = TRUE)\n\n## {\n##   "path": ["cities.csv"],\n##   "profile": ["tabular-data-resource"],\n##   "encoding": ["utf-8"],\n##   "name": ["cities"],\n##   "format": ["csv"],\n##   "mediatype": ["text/csv"],\n##   "schema": {\n##     "fields": [\n##       {\n##         "name": ["city"],\n##         "type": ["string"],\n##         "format": ["default"]\n##       },\n##       {\n##         "name": ["location"],\n##         "type": ["string"],\n##         "format": ["default"]\n##       }\n##     ],\n##     "missingValues": [\n##       [""]\n##     ]\n##   }\n## }\n\njsonlite::toJSON(resource$descriptor, pretty = TRUE)\n\n## {\n##   "path": ["cities.csv"],\n##   "profile": ["tabular-data-resource"],\n##   "encoding": ["utf-8"],\n##   "name": ["cities"],\n##   "format": ["csv"],\n##   "mediatype": ["text/csv"],\n##   "schema": {\n##     "fields": [\n##       {\n##         "name": ["city"],\n##         "type": ["string"],\n##         "format": ["default"]\n##       },\n##       {\n##         "name": ["location"],\n##         "type": ["string"],\n##         "format": ["default"]\n##       }\n##     ],\n##     "missingValues": [\n##       [""]\n##     ]\n##   }\n## }\n\n# resource$read( keyed = TRUE )\n# # Fails with a data validation error\n')),Object(i.b)("p",null,"Let\u2019s fix not available location. There is a ",Object(i.b)("inlineCode",{parentName:"p"},"missingValues")," property in\nTable Schema specification. As a first try we set ",Object(i.b)("inlineCode",{parentName:"p"},"missingValues")," to\n",Object(i.b)("inlineCode",{parentName:"p"},"N/A")," in ",Object(i.b)("inlineCode",{parentName:"p"},"resource$descriptor.schema"),". Resource descriptor could be\nchanged in-place but all changes should be commited by\n",Object(i.b)("inlineCode",{parentName:"p"},"resource$commit()"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"resource$descriptor$schema$missingValues <- 'N/A'\nresource$commit()\n\n## [1] TRUE\n\nresource$valid # FALSE\n\n## [1] FALSE\n\nresource$errors\n\n## [[1]]\n## [1] \"Descriptor validation error:\\n            data.schema.missingValues - is the wrong type\"\n")),Object(i.b)("p",null,"As a good citiziens we\u2019ve decided to check out recource descriptor\nvalidity. And it\u2019s not valid! We should use an list for ",Object(i.b)("inlineCode",{parentName:"p"},"missingValues"),"\nproperty. Also don\u2019t forget to have an empty string as a missing value:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"resource$descriptor$schema[['missingValues']] <- list('', 'N/A')\nresource$commit()\n\n## [1] TRUE\n\nresource$valid # TRUE\n\n## [1] TRUE\n")),Object(i.b)("p",null,"All good. It looks like we\u2019re ready to read our data again:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'jsonlite::toJSON(resource$read( keyed = TRUE ), pretty = TRUE)\n\n## [\n##   {\n##     "city": ["london"],\n##     "location": ["\\"51.50 -0.11\\""]\n##   },\n##   {\n##     "city": ["paris"],\n##     "location": ["\\"48.85 2.30\\""]\n##   },\n##   {\n##     "city": ["rome"],\n##     "location": ["\\"41.89 12.51\\""]\n##   }\n## ]\n')),Object(i.b)("p",null,"Now we see that: - locations are lists with numeric lattide and\nlongitude - Rome\u2019s location is a native JavaScript ",Object(i.b)("inlineCode",{parentName:"p"},"null")),Object(i.b)("p",null,"And because there are no errors on data reading we could be sure that\nour data is valid againt our schema. Let\u2019s save our resource descriptor:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"resource$save('dataresource.json')\n")),Object(i.b)("p",null,"Let\u2019s check newly-crated ",Object(i.b)("inlineCode",{parentName:"p"},"dataresource.json"),". It contains path to our\ndata file, inferred metadata and our ",Object(i.b)("inlineCode",{parentName:"p"},"missingValues")," tweak:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'{\n"path": "data.csv",\n"profile": "tabular-data-resource",\n"encoding": "utf-8",\n"name": "data",\n"format": "csv",\n"mediatype": "text/csv",\n"schema": {\n"fields": [\n{\n"name": "city",\n"type": "string",\n"format": "default"\n},\n{\n"name": "location",\n"type": "geopoint",\n"format": "default"\n}\n],\n"missingValues": [\n"",\n"N/A"\n]\n}\n}\n')),Object(i.b)("p",null,"If we decide to improve it even more we could update the\n",Object(i.b)("inlineCode",{parentName:"p"},"dataresource.json")," file and then open it again using local file name:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"resource <- Resource.load('dataresource.json')\n# Continue the work\n")),Object(i.b)("p",null,"It was one basic introduction to the ",Object(i.b)("inlineCode",{parentName:"p"},"Resource")," class. To learn more\nlet\u2019s take a look on ",Object(i.b)("inlineCode",{parentName:"p"},"Resource")," class API reference."),Object(i.b)("h4",{id:"working-with-profile"},"Working with Profile"),Object(i.b)("p",null,"A component to represent JSON Schema profile from ",Object(i.b)("a",{parentName:"p",href:"https://specs.frictionlessdata.io/schemas/registry.json"},"Profiles\nRegistry"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"profile <- Profile.load('data-package')\nprofile$name # data-package\n\n## [1] \"data-package\"\n\nprofile$jsonschema # List of JSON Schema contents\n\nvalid_errors <- profile$validate(descriptor)\nvalid <- valid_errors$valid # TRUE if valid descriptor\nvalid\n\n## [1] TRUE\n")),Object(i.b)("h4",{id:"working-with-validate"},"Working with validate"),Object(i.b)("p",null,"A standalone function to validate a data package descriptor:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'valid_errors <- validate(\'{"name": "Invalid Datapackage"}\')\n')),Object(i.b)("h4",{id:"working-with-infer"},"Working with infer"),Object(i.b)("p",null,"A standalone function to infer a data package descriptor."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'descriptor <- infer("csv",basePath = \'.\')\njsonlite::toJSON(descriptor, pretty = TRUE)\n\n## {\n##   "profile": ["tabular-data-package"],\n##   "resources": [\n##     {\n##       "path": ["cities.csv"],\n##       "profile": ["tabular-data-resource"],\n##       "encoding": ["utf-8"],\n##       "name": ["cities"],\n##       "format": ["csv"],\n##       "mediatype": ["text/csv"],\n##       "schema": {\n##         "fields": [\n##           {\n##             "name": ["city"],\n##             "type": ["string"],\n##             "format": ["default"]\n##           },\n##           {\n##             "name": ["location"],\n##             "type": ["string"],\n##             "format": ["default"]\n##           }\n##         ],\n##         "missingValues": [\n##           [""]\n##         ]\n##       }\n##     },\n##     {\n##       "path": ["population.csv"],\n##       "profile": ["tabular-data-resource"],\n##       "encoding": ["utf-8"],\n##       "name": ["population"],\n##       "format": ["csv"],\n##       "mediatype": ["text/csv"],\n##       "schema": {\n##         "fields": [\n##           {\n##             "name": ["city"],\n##             "type": ["string"],\n##             "format": ["default"]\n##           },\n##           {\n##             "name": ["year"],\n##             "type": ["integer"],\n##             "format": ["default"]\n##           },\n##           {\n##             "name": ["population"],\n##             "type": ["integer"],\n##             "format": ["default"]\n##           }\n##         ],\n##         "missingValues": [\n##           [""]\n##         ]\n##       }\n##     }\n##   ]\n## }\n')),Object(i.b)("h4",{id:"working-with-foreign-keys"},"Working with Foreign Keys"),Object(i.b)("p",null,"The package supports foreign keys described in the ",Object(i.b)("a",{parentName:"p",href:"https://specs.frictionlessdata.io/table-schema/#foreign-keys"},"Table\nSchema"),"\nspecification. It means if your data package descriptor use\n",Object(i.b)("inlineCode",{parentName:"p"},"resources[]$schema$foreignKeys")," property for some resources a data\nintegrity will be checked on reading operations."),Object(i.b)("p",null,"Consider we have a data package:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'DESCRIPTOR <- \'{\n"resources": [\n{\n"name": "teams",\n"data": [\n["id", "name", "city"],\n["1", "Arsenal", "London"],\n["2", "Real", "Madrid"],\n["3", "Bayern", "Munich"]\n],\n"schema": {\n"fields": [\n{"name": "id", "type": "integer"},\n{"name": "name", "type": "string"},\n{"name": "city", "type": "string"}\n],\n"foreignKeys": [\n{\n"fields": "city",\n"reference": {"resource": "cities", "fields": "name"}\n}\n]\n}\n}, {\n"name": "cities",\n"data": [\n["name", "country"],\n["London", "England"],\n["Madrid", "Spain"]\n]\n}\n]\n}\'\n')),Object(i.b)("p",null,"Let\u2019s check relations for a ",Object(i.b)("inlineCode",{parentName:"p"},"teams")," resource:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"package <- Package.load(DESCRIPTOR)\nteams <- package$getResource('teams')\n\nteams$checkRelations()\n\n## Error: Foreign key 'city' violation in row '4'\n\n# tableschema.exceptions.RelationError: Foreign key \"['city']\" violation in row \"4\"\n")),Object(i.b)("p",null,"As we could see there is a foreign key violation. That\u2019s because our\nlookup table ",Object(i.b)("inlineCode",{parentName:"p"},"cities")," doesn\u2019t have a city of ",Object(i.b)("inlineCode",{parentName:"p"},"Munich")," but we have a team\nfrom there. We need to fix it in ",Object(i.b)("inlineCode",{parentName:"p"},"cities")," resource:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"package$descriptor$resources[[2]]$data <- rlist::list.append(package$descriptor$resources[[2]]$data, list('Munich', 'Germany'))\npackage$commit()\n\n## [1] TRUE\n\nteams <- package$getResource('teams')\nteams$checkRelations()\n\n## [1] TRUE\n\n# TRUE\n")),Object(i.b)("p",null,"Fixed! But not only a check operation is available. We could use\n",Object(i.b)("inlineCode",{parentName:"p"},"relations")," argument for ",Object(i.b)("inlineCode",{parentName:"p"},"resource$iter/read")," methods to dereference a\nresource relations:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'jsonlite::toJSON(teams$read(keyed = TRUE, relations = FALSE), pretty =  TRUE)\n\n## [\n##   {\n##     "id": [1],\n##     "name": ["Arsenal"],\n##     "city": ["London"]\n##   },\n##   {\n##     "id": [2],\n##     "name": ["Real"],\n##     "city": ["Madrid"]\n##   },\n##   {\n##     "id": [3],\n##     "name": ["Bayern"],\n##     "city": ["Munich"]\n##   }\n## ]\n')),Object(i.b)("p",null,"Instead of plain city name we\u2019ve got a dictionary containing a city\ndata. These ",Object(i.b)("inlineCode",{parentName:"p"},"resource$iter/read")," methods will fail with the same as\n",Object(i.b)("inlineCode",{parentName:"p"},"resource$check_relations")," error if there is an integrity issue. But\nonly if ",Object(i.b)("inlineCode",{parentName:"p"},"relations = TRUE")," flag is passed."),Object(i.b)("h2",{id:"api-referencer"},"API Referencer"),Object(i.b)("h3",{id:"package"},"Package"),Object(i.b)("p",null,"Package representation"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package"},"Package")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"instance")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package+valid"},"$valid")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Boolean")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package+errors"},"$errors")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"List.&lt;Error&gt;")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package+profile"},"$profile")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Profile")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package+descriptor"},"$descriptor")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Object")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package+resources"},"$resources")," \u21d2\n",Object(i.b)("inlineCode",{parentName:"li"},"List.&lt;Resoruce&gt;")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package+resourceNames"},"$resourceNames")," \u21d2\n",Object(i.b)("inlineCode",{parentName:"li"},"List.&lt;string&gt;")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package+getResource"},"$getResource(name)")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Resource"),"|"," ",Object(i.b)("inlineCode",{parentName:"li"},"null")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package+addResource"},"$addResource(descriptor)")," \u21d2\n",Object(i.b)("inlineCode",{parentName:"li"},"Resource")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package+removeResource"},"$removeResource(name)")," \u21d2\n",Object(i.b)("inlineCode",{parentName:"li"},"Resource")," ","|"," ",Object(i.b)("inlineCode",{parentName:"li"},"null")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package+infer"},"$infer(pattern)")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Object")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package+commit"},"$commit(strict)")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Boolean")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package+save"},"$save(target, raises, returns)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"static")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Package.load"},".load(descriptor, basePath, strict)")," \u21d2\n",Object(i.b)("a",{parentName:"li",href:"#Package"},Object(i.b)("inlineCode",{parentName:"a"},"Package")))),Object(i.b)("h4",{id:"packagevalid-\u21d2-boolean"},"package$.valid \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Boolean")),Object(i.b)("p",null,"Validation status"),Object(i.b)("p",null,"It always ",Object(i.b)("inlineCode",{parentName:"p"},"true")," in strict mode."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Boolean")," - returns validation status"),Object(i.b)("h4",{id:"packageerrors-\u21d2-listlterrorgt"},"package$errors \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"List.&lt;Error&gt;")),Object(i.b)("p",null,"Validation errors"),Object(i.b)("p",null,"It always empty in strict mode."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"List.&lt;Error&gt;")," - returns validation errors"),Object(i.b)("h4",{id:"packageprofile-\u21d2-profile"},"package$profile \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Profile")),Object(i.b)("p",null,"Profile"),Object(i.b)("h4",{id:"packagedescriptor-\u21d2-object"},"package$descriptor \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Object")),Object(i.b)("p",null,"Descriptor"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Object")," - schema descriptor"),Object(i.b)("h4",{id:"packageresources-\u21d2-listltresorucegt"},"package$resources \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"List.&lt;Resoruce&gt;")),Object(i.b)("p",null,"Resources"),Object(i.b)("h4",{id:"packageresourcenames-\u21d2-listltstringgt"},"package$resourceNames \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"List.&lt;string&gt;")),Object(i.b)("p",null,"Resource names"),Object(i.b)("h4",{id:"packagegetresourcename-\u21d2-resource--null"},"package$getResource(name) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Resource")," ","|"," ",Object(i.b)("inlineCode",{parentName:"h4"},"null")),Object(i.b)("p",null,"Return a resource"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Resource")," ","|"," ",Object(i.b)("inlineCode",{parentName:"p"},"null")," - resource\ninstance if exists"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"name"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string"))))),Object(i.b)("h4",{id:"packageaddresourcedescriptor-\u21d2-resource"},"package$addResource(descriptor) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Resource")),Object(i.b)("p",null,"Add a resource"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Resource")," - added resource instance"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"descriptor"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"Object"))))),Object(i.b)("h4",{id:"packageremoveresourcename-\u21d2-resource--null"},"package$removeResource(name) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Resource")," ","|"," ",Object(i.b)("inlineCode",{parentName:"h4"},"null")),Object(i.b)("p",null,"Remove a resource"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Resource")," ","|"," ",Object(i.b)("inlineCode",{parentName:"p"},"null")," - removed\nresource instance if exists"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"name"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string"))))),Object(i.b)("h4",{id:"packageinferpattern-\u21d2-object"},"package$infer(pattern) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Object")),Object(i.b)("p",null,"Infer metadata"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Default"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"pattern"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"false"))))),Object(i.b)("h4",{id:"packagecommitstrict-\u21d2-boolean"},"package$commit(strict) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Boolean")),Object(i.b)("p",null,"Update package instance if there are in-place changes in the descriptor."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Boolean")," - returns true on success and false if\nnot modified\n",Object(i.b)("strong",{parentName:"p"},"Throws"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"DataPackageError")," raises any error occurred in the\nprocess")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"strict"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},"alter ",Object(i.b)("inlineCode",{parentName:"td"},"strict")," mode for further work")))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'dataPackage <- Package.load(\'{\n"name": "package",\n"resources": [{"name": "resource", "data": ["data"]}]\n}\')\ndataPackage$descriptor$name # package\n\n## [1] "package"\n\ndataPackage$descriptor$name <- \'renamed-package\'\ndataPackage$descriptor$name # renamed-package\n\n## [1] "renamed-package"\n\ndataPackage$commit()\n\n## [1] TRUE\n')),Object(i.b)("h4",{id:"packagesavetarget-raises-returns"},"package$save(target, raises, returns)"),Object(i.b)("p",null,"Save data package to target destination."),Object(i.b)("p",null,"If target path has a zip file extension the package will be zipped and\nsaved entirely. If it has a json file extension only the descriptor will\nbe saved."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"target"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:null},"path where to save a data package")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"raises"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"DataPackageError")),Object(i.b)("td",{parentName:"tr",align:null},"error if something goes wrong")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"returns"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},"true on success")))),Object(i.b)("h4",{id:"packageloaddescriptor-basepath-strict-\u21d2-package"},"Package.load(descriptor, basePath, strict) \u21d2 ",Object(i.b)("a",{parentName:"h4",href:"#Package"},Object(i.b)("inlineCode",{parentName:"a"},"Package"))),Object(i.b)("p",null,"Factory method to instantiate ",Object(i.b)("inlineCode",{parentName:"p"},"Package")," class."),Object(i.b)("p",null,"This method is async and it should be used with await keyword or as a\n",Object(i.b)("inlineCode",{parentName:"p"},"Promise"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("a",{parentName:"p",href:"#Package"},Object(i.b)("inlineCode",{parentName:"a"},"Package"))," - returns data package\nclass instance\n",Object(i.b)("strong",{parentName:"p"},"Throws"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"DataPackageError")," raises error if something goes wrong")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"descriptor"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")," ","|"," ",Object(i.b)("inlineCode",{parentName:"td"},"Object")),Object(i.b)("td",{parentName:"tr",align:null},"package descriptor as local path, url or object. If ththe path has a ",Object(i.b)("inlineCode",{parentName:"td"},"zip")," file extension it will be unzipped to the temp directory first.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"basePath"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:null},"base path for all relative paths")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"strict"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},"strict flag to alter validation behavior. Setting it to ",Object(i.b)("inlineCode",{parentName:"td"},"true")," leads to throwing errors on any operation with invalid descriptor")))),Object(i.b)("h3",{id:"resource-1"},"Resource"),Object(i.b)("p",null,"Resource representation"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource"},"Resource")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"instance")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+valid"},"$valid")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Boolean")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+errors"},"$errors")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"List.&lt;Error&gt;")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+profile"},"$profile")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Profile")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+descriptor"},"$descriptor")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Object")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+name"},"$name")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"string")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+inline"},"$inline")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"boolean")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+local"},"$local")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"boolean")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+remote"},"$remote")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"boolean")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+multipart"},"$multipart")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"boolean")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+tabular"},"$tabular")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"boolean")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+source"},"$source")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"List")," ","|",Object(i.b)("inlineCode",{parentName:"li"},"string")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+headers"},"$headers")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"List.&lt;string&gt;")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+schema"},"$schema")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"tableschema.Schema")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+iter"},"$iter(keyed, extended, cast, forceCast, relations,\nstream)")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"AsyncIterator")," ","|",Object(i.b)("inlineCode",{parentName:"li"},"Stream")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+read"},"$read(limit)")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"List.&lt;List&gt;")," ","|",Object(i.b)("inlineCode",{parentName:"li"},"List.&lt;Object&gt;")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+checkRelations"},"$checkRelations()")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"boolean")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+rawIter"},"$rawIter(stream)")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Iterator")," ","|",Object(i.b)("inlineCode",{parentName:"li"},"Stream")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+rawRead"},"$rawRead()")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Buffer")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+infer"},"$infer()")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Object")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+commit"},"$commit(strict)")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"boolean")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource+save"},"$save(target)")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"boolean")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"static")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Resource.load"},"$load(descriptor, basePath, strict)")," \u21d2\n",Object(i.b)("a",{parentName:"li",href:"#Resource"},Object(i.b)("inlineCode",{parentName:"a"},"Resource")))),Object(i.b)("h4",{id:"resourcevalid-\u21d2-boolean"},"resource$valid \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Boolean")),Object(i.b)("p",null,"Validation status"),Object(i.b)("p",null,"It always ",Object(i.b)("inlineCode",{parentName:"p"},"true")," in strict mode."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Boolean")," - returns validation status"),Object(i.b)("h4",{id:"resourceerrors-\u21d2-listlterrorgt"},"resource$errors \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"List.&lt;Error&gt;")),Object(i.b)("p",null,"Validation errors"),Object(i.b)("p",null,"It always empty in strict mode."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"List.&lt;Error&gt;")," - returns validation errors"),Object(i.b)("h4",{id:"resourceprofile-\u21d2-profile"},"resource$profile \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Profile")),Object(i.b)("p",null,"Profile"),Object(i.b)("h4",{id:"resourcedescriptor-\u21d2-object"},"resource$descriptor \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Object")),Object(i.b)("p",null,"Descriptor"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Object")," - schema descriptor"),Object(i.b)("h4",{id:"resourcename-\u21d2-string"},"resource$name \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"string")),Object(i.b)("p",null,"Name"),Object(i.b)("h4",{id:"resourceinline-\u21d2-boolean"},"resource$inline \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"boolean")),Object(i.b)("p",null,"Whether resource is inline"),Object(i.b)("h4",{id:"resourcelocal-\u21d2-boolean"},"resource$local \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"boolean")),Object(i.b)("p",null,"Whether resource is local"),Object(i.b)("h4",{id:"resourceremote-\u21d2-boolean"},"resource$remote \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"boolean")),Object(i.b)("p",null,"Whether resource is remote"),Object(i.b)("h4",{id:"resourcemultipart-\u21d2-boolean"},"resource$multipart \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"boolean")),Object(i.b)("p",null,"Whether resource is multipart"),Object(i.b)("h4",{id:"resourcetabular-\u21d2-boolean"},"resource$tabular \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"boolean")),Object(i.b)("p",null,"Whether resource is tabular"),Object(i.b)("h4",{id:"resourcesource-\u21d2-list--string"},"resource$source \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"List")," ","|"," ",Object(i.b)("inlineCode",{parentName:"h4"},"string")),Object(i.b)("p",null,"Source"),Object(i.b)("p",null,"Combination of ",Object(i.b)("inlineCode",{parentName:"p"},"resource.source")," and\n",Object(i.b)("inlineCode",{parentName:"p"},"resource.inline/local/remote/multipart")," provides predictable interface\nto work with resource data."),Object(i.b)("h4",{id:"resourceheaders-\u21d2-listltstringgt"},"resource$headers \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"List.&lt;string&gt;")),Object(i.b)("p",null,"Headers"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Only for tabular resources")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"List.&lt;string&gt;")," - data source headers"),Object(i.b)("h4",{id:"resourceschema-\u21d2-tableschemaschema"},"resource$schema \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"tableschema.Schema")),Object(i.b)("p",null,"Schema"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Only for tabular resources")),Object(i.b)("h4",{id:"resourceiterkeyed-extended-cast-forcecast-relations-stream-\u21d2-asynciterator--stream"},"resource$iter(keyed, extended, cast, forceCast, relations, stream) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"AsyncIterator")," ","|"," ",Object(i.b)("inlineCode",{parentName:"h4"},"Stream")),Object(i.b)("p",null,"Iterate through the table data"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Only for tabular resources")),Object(i.b)("p",null,"And emits rows cast based on table schema (async for loop). With a\n",Object(i.b)("inlineCode",{parentName:"p"},"stream")," flag instead of async iterator a Node stream will be returned.\nData casting can be disabled."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"AsyncIterator")," ","|"," ",Object(i.b)("inlineCode",{parentName:"p"},"Stream")," - async\niterator/stream of rows: - ",Object(i.b)("inlineCode",{parentName:"p"},"[value1, value2]")," - base -\n",Object(i.b)("inlineCode",{parentName:"p"},"{header1: value1, header2: value2}")," - keyed -\n",Object(i.b)("inlineCode",{parentName:"p"},"[rowNumber, [header1, header2], [value1, value2]]")," - extended\n",Object(i.b)("strong",{parentName:"p"},"Throws"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TableSchemaError")," raises any error occurred in this\nprocess")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"keyed"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},"iter keyed rows")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"extended"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},"iter extended rows")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"cast"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},"disable data casting if false")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"forceCast"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},"instead of raising on the first row with cast error return an error object to replace failed row. It will allow to iterate over the whole data file even if it\u2019s not compliant to the schema. Example of output stream: ",Object(i.b)("inlineCode",{parentName:"td"},"[['val1', 'val2'], TableSchemaError, ['val3', 'val4'], ...]"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"relations"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},"if true foreign key fields will be checked and resolved to its references")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"stream"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},"return Node Readable Stream of table rows")))),Object(i.b)("h4",{id:"resourcereadlimit-\u21d2-listltlistgt--listltobjectgt"},"resource$read(limit) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"List.&lt;List&gt;")," ","|"," ",Object(i.b)("inlineCode",{parentName:"h4"},"List.&lt;Object&gt;")),Object(i.b)("p",null,"Read the table data into memory"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Only for tabular resources; the API is the same as ",Object(i.b)("inlineCode",{parentName:"p"},"resource.iter")," has\nexcept for:")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"List.&lt;List&gt;")," ","|","\n",Object(i.b)("inlineCode",{parentName:"p"},"List.&lt;Object&gt;")," - list of rows: - ",Object(i.b)("inlineCode",{parentName:"p"},"[value1, value2]")," -\nbase - ",Object(i.b)("inlineCode",{parentName:"p"},"{header1: value1, header2: value2}")," - keyed -\n",Object(i.b)("inlineCode",{parentName:"p"},"[rowNumber, [header1, header2], [value1, value2]]")," - extended"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"limit"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"integer")),Object(i.b)("td",{parentName:"tr",align:null},"limit of rows to read")))),Object(i.b)("h4",{id:"resourcecheckrelations-\u21d2-boolean"},"resource$checkRelations() \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"boolean")),Object(i.b)("p",null,"It checks foreign keys and raises an exception if there are integrity\nissues."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Only for tabular resources")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"boolean")," - returns True if no issues\n",Object(i.b)("strong",{parentName:"p"},"Throws"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"DataPackageError")," raises if there are integrity issues")),Object(i.b)("h4",{id:"resourcerawiterstream-\u21d2-iterator--stream"},"resource$rawIter(stream) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Iterator")," ","|"," ",Object(i.b)("inlineCode",{parentName:"h4"},"Stream")),Object(i.b)("p",null,"Iterate over data chunks as bytes. If ",Object(i.b)("inlineCode",{parentName:"p"},"stream")," is true Node Stream will\nbe returned."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Iterator")," ","|"," ",Object(i.b)("inlineCode",{parentName:"p"},"Stream")," - returns\nIterator/Stream"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"stream"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},"Node Stream will be returned")))),Object(i.b)("h4",{id:"resourcerawread-\u21d2-buffer"},"resource$rawRead() \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Buffer")),Object(i.b)("p",null,"Returns resource data as bytes."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Buffer")," - returns Buffer with resource data"),Object(i.b)("h4",{id:"resourceinfer-\u21d2-object"},"resource$infer() \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Object")),Object(i.b)("p",null,"Infer resource metadata like name, format, mediatype, encoding, schema\nand profile."),Object(i.b)("p",null,"It commits this changes into resource instance."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Object")," - returns resource descriptor"),Object(i.b)("h4",{id:"resourcecommitstrict-\u21d2-boolean"},"resource$commit(strict) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"boolean")),Object(i.b)("p",null,"Update resource instance if there are in-place changes in the\ndescriptor."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"boolean")," - returns true on success and false if\nnot modified\n",Object(i.b)("strong",{parentName:"p"},"Throws"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"DataPackageError raises error if something goes wrong")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"strict"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},"alter ",Object(i.b)("inlineCode",{parentName:"td"},"strict")," mode for further work")))),Object(i.b)("h4",{id:"resourcesavetarget-\u21d2-boolean"},"resource$save(target) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"boolean")),Object(i.b)("p",null,"Save resource to target destination."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"For now only descriptor will be saved.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"boolean")," - returns true on success\n",Object(i.b)("strong",{parentName:"p"},"Throws"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"DataPackageError")," raises error if something goes wrong")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"target"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:null},"path where to save a resource")))),Object(i.b)("h4",{id:"resourceloaddescriptor-basepath-strict-\u21d2-resource"},"Resource.load(descriptor, basePath, strict) \u21d2 ",Object(i.b)("a",{parentName:"h4",href:"#Resource"},Object(i.b)("inlineCode",{parentName:"a"},"Resource"))),Object(i.b)("p",null,"Factory method to instantiate ",Object(i.b)("inlineCode",{parentName:"p"},"Resource")," class."),Object(i.b)("p",null,"This method is async and it should be used with await keyword or as a\n",Object(i.b)("inlineCode",{parentName:"p"},"Promise"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("a",{parentName:"p",href:"#Resource"},Object(i.b)("inlineCode",{parentName:"a"},"Resource"))," - returns resource class\ninstance\n",Object(i.b)("strong",{parentName:"p"},"Throws"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"DataPackageError")," raises error if something goes wrong")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"descriptor"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")," ","|"," ",Object(i.b)("inlineCode",{parentName:"td"},"Object")),Object(i.b)("td",{parentName:"tr",align:null},"resource descriptor as local path, url or object")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"basePath"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:null},"base path for all relative paths")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"strict"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},"strict flag to alter validation behavior. Setting it to ",Object(i.b)("inlineCode",{parentName:"td"},"true")," leads to throwing errors on any operation with invalid descriptor")))),Object(i.b)("h3",{id:"profile"},"Profile"),Object(i.b)("p",null,"Profile representation"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Profile"},"Profile")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"instance")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Profile+name"},"$name")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"string")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Profile+jsonschema"},"$jsonschema")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Object")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Profile+validate"},"$validate(descriptor)")," \u21d2 ",Object(i.b)("inlineCode",{parentName:"li"},"Object")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"static")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Profile.load"},"$load(profile)")," \u21d2 ",Object(i.b)("a",{parentName:"li",href:"#Profile"},Object(i.b)("inlineCode",{parentName:"a"},"Profile")))),Object(i.b)("h4",{id:"profilename-\u21d2-string"},"profile$name \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"string")),Object(i.b)("p",null,"Name"),Object(i.b)("h4",{id:"profilejsonschema-\u21d2-object"},"profile$jsonschema \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Object")),Object(i.b)("p",null,"JsonSchema"),Object(i.b)("h4",{id:"profilevalidatedescriptor-\u21d2-object"},"profile$validate(descriptor) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h4"},"Object")),Object(i.b)("p",null,"Validate a data package ",Object(i.b)("inlineCode",{parentName:"p"},"descriptor")," against the profile."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Object")," - returns a ",Object(i.b)("inlineCode",{parentName:"p"},"{valid, errors}")," object"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"descriptor"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"Object")),Object(i.b)("td",{parentName:"tr",align:null},"retrieved and dereferenced data package descriptor")))),Object(i.b)("h4",{id:"profileloadprofile-\u21d2-profile"},"Profile.load(profile) \u21d2 ",Object(i.b)("a",{parentName:"h4",href:"#Profile"},Object(i.b)("inlineCode",{parentName:"a"},"Profile"))),Object(i.b)("p",null,"Factory method to instantiate ",Object(i.b)("inlineCode",{parentName:"p"},"Profile")," class."),Object(i.b)("p",null,"This method is async and it should be used with await keyword or as a\n",Object(i.b)("inlineCode",{parentName:"p"},"Promise"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("a",{parentName:"p",href:"#Profile"},Object(i.b)("inlineCode",{parentName:"a"},"Profile"))," - returns profile class\ninstance\n",Object(i.b)("strong",{parentName:"p"},"Throws"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"DataPackageError")," raises error if something goes wrong")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"profile"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:null},"profile name in registry or URL to JSON Schema")))),Object(i.b)("h3",{id:"validatedescriptor-\u21d2-object"},"validate(descriptor) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h3"},"Object")),Object(i.b)("p",null,"This function is async so it has to be used with ",Object(i.b)("inlineCode",{parentName:"p"},"await")," keyword or as a\n",Object(i.b)("inlineCode",{parentName:"p"},"Promise"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Object")," - returns a ",Object(i.b)("inlineCode",{parentName:"p"},"{valid, errors}")," object"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"descriptor"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")," ","|"," ",Object(i.b)("inlineCode",{parentName:"td"},"Object")),Object(i.b)("td",{parentName:"tr",align:null},"data package descriptor (local/remote path or object)")))),Object(i.b)("h3",{id:"inferpattern-\u21d2-object"},"infer(pattern) \u21d2 ",Object(i.b)("inlineCode",{parentName:"h3"},"Object")),Object(i.b)("p",null,"This function is async so it has to be used with ",Object(i.b)("inlineCode",{parentName:"p"},"await")," keyword or as a\n",Object(i.b)("inlineCode",{parentName:"p"},"Promise"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),": ",Object(i.b)("inlineCode",{parentName:"p"},"Object")," - returns data package descriptor"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Param"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"pattern"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:null},"glob file pattern")))),Object(i.b)("h3",{id:"datapackageerror"},"DataPackageError"),Object(i.b)("p",null,"Base class for the all DataPackage errors."),Object(i.b)("h3",{id:"tableschemaerror"},"TableSchemaError"),Object(i.b)("p",null,"Base class for the all TableSchema errors."),Object(i.b)("h2",{id:"contributing"},"Contributing"),Object(i.b)("p",null,"The project follows the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/okfn/coding-standards"},"Open Knowledge International coding\nstandards"),". There are common\ncommands to work with the project.Recommended way to get started is to\ncreate, activate and load the package environment. To install package\nand development dependencies into active environment:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'devtools::install_github("frictionlessdata/datapackage-r", dependencies=TRUE)\n')),Object(i.b)("p",null,"To make test:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"test_that(description, {\nexpect_equal(test, expected result)\n})\n")),Object(i.b)("p",null,"To run tests:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"devtools::test()\n")),Object(i.b)("p",null,"more detailed information about how to create and run tests you can find\nin ",Object(i.b)("a",{parentName:"p",href:"https://github.com/hadley/testthat"},"testthat package")),Object(i.b)("h2",{id:"changelog---news"},"Changelog - News"),Object(i.b)("p",null,"In\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/datapackage-r/blob/master/NEWS.md"},"NEWS.md"),"\ndescribed only breaking and the most important changes. The full\nchangelog could be found in nicely formatted\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/datapackage-r/commits/master"},"commit"),"\nhistory."))}s.isMDXComponent=!0},113:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},s=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),s=p(a),m=n,u=s["".concat(l,".").concat(m)]||s[m]||d[m]||i;return a?r.a.createElement(u,b(b({ref:t},o),{},{components:a})):r.a.createElement(u,b({ref:t},o))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:n,l[1]=b;for(var o=2;o<i;o++)l[o]=a[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);