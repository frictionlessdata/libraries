(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{112:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return j}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function b(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?b(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,b=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),s=p(a),m=n,j=s["".concat(b,".").concat(m)]||s[m]||d[m]||l;return a?r.a.createElement(j,i(i({ref:t},o),{},{components:a})):r.a.createElement(j,i({ref:t},o))}));function j(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,b=new Array(l);b[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,b[1]=i;for(var o=2;o<l;o++)b[o]=a[o];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},79:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return o})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(7),l=(a(0),a(112)),b=["components"],i={title:"tableschema-r"},c={unversionedId:"table-schema/rlang",id:"table-schema/rlang",isDocsHomePage:!1,title:"tableschema-r",description:"CRAN\\Status\\Badge",source:"@site/docs/table-schema/rlang.md",slug:"/table-schema/rlang",permalink:"/docs/table-schema/rlang",editUrl:"https://github.com/frictionlessdata/libraries/edit/master/docs/docs/table-schema/rlang.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1643977481,formattedLastUpdatedAt:"2/4/2022",sidebar:"table-schema",previous:{title:"tableschema-go",permalink:"/docs/table-schema/go"},next:{title:"tableschema-jl",permalink:"/docs/table-schema/julia"}},o=[{value:"Description",id:"description",children:[]},{value:"Features",id:"features",children:[]},{value:"Getting started",id:"getting-started",children:[{value:"Installation",id:"installation",children:[]},{value:"Load library",id:"load-library",children:[]}]},{value:"Documentation",id:"documentation",children:[{value:"Working with Table",id:"working-with-table",children:[]}]},{value:"Working with Schema",id:"working-with-schema",children:[{value:"Working with Field",id:"working-with-field",children:[]}]},{value:"API Reference",id:"api-reference",children:[{value:"Table",id:"table",children:[]},{value:"Schema",id:"schema",children:[]},{value:"Field",id:"field",children:[]},{value:"validate(descriptor) \u21d2 <code>Object</code>",id:"validatedescriptor--object",children:[]},{value:"infer(source, headers, options) \u21d2 <code>Object</code>",id:"infersource-headers-options--object",children:[]}]},{value:"Contributing",id:"contributing",children:[]},{value:"Changelog - News",id:"changelog---news",children:[]}],p={toc:o};function s(e){var t=e.components,a=Object(r.a)(e,b);return Object(l.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,Object(l.b)("a",{parentName:"p",href:"https://cran.r-project.org/package=tableschema.r"},Object(l.b)("img",{parentName:"a",src:"https://www.r-pkg.org/badges/version/tableschema.r",alt:"CRAN_Status_Badge"})),"\n",Object(l.b)("a",{parentName:"p",href:"https://travis-ci.org/frictionlessdata/tableschema-r"},Object(l.b)("img",{parentName:"a",src:"https://travis-ci.org/frictionlessdata/tableschema-r.svg?branch=master",alt:"Build Status"})),"\n",Object(l.b)("a",{parentName:"p",href:"https://coveralls.io/r/frictionlessdata/tableschema-r?branch=master"},Object(l.b)("img",{parentName:"a",src:"https://coveralls.io/repos/github/frictionlessdata/tableschema-r/badge.svg",alt:"Coverage status"})),"\n",Object(l.b)("a",{parentName:"p",href:"http://www.repostatus.org/#active"},Object(l.b)("img",{parentName:"a",src:"http://www.repostatus.org/badges/latest/active.svg",alt:"Project Status: Active \u2013 The project has reached a stable, usable state and is being actively developed."})),"\n",Object(l.b)("a",{parentName:"p",href:"https://cran.r-project.org/"},Object(l.b)("img",{parentName:"a",src:"https://img.shields.io/badge/R%3E%3D-3.6-6666ff.svg",alt:"minimal R version"})),"\n",Object(l.b)("a",{parentName:"p",href:"http://cran.rstudio.com/web/packages/tableschema.r/index.html"},Object(l.b)("img",{parentName:"a",src:"http://cranlogs.r-pkg.org/badges/grand-total/tableschema.r",alt:"Stats"})),"\n",Object(l.b)("a",{parentName:"p",href:"https://opensource.org/licenses/MIT"},Object(l.b)("img",{parentName:"a",src:"https://img.shields.io/badge/licence-MIT-blue.svg",alt:"Licence"})),"\n",Object(l.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/tableschema-r"},Object(l.b)("img",{parentName:"a",src:"https://img.shields.io/badge/codebase-github-brightgreen",alt:"Codebase"})),"\n",Object(l.b)("a",{parentName:"p",href:"https://discordapp.com/invite/Sewv6av"},Object(l.b)("img",{parentName:"a",src:"https://img.shields.io/badge/support-discord-brightgreen",alt:"Support"}))),Object(l.b)("h2",{id:"description"},"Description"),Object(l.b)("p",null,"R library for working with ",Object(l.b)("a",{parentName:"p",href:"http://specs.frictionlessdata.io/table-schema/"},"Table\nSchema"),"."),Object(l.b)("h2",{id:"features"},"Features"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Table")," class for working with data and schema"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Schema")," class for working with schemas"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Field")," class for working with schema fields"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"validate")," function for validating schema descriptors"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"infer")," function that creates a schema based on a data sample")),Object(l.b)("h2",{id:"getting-started"},"Getting started"),Object(l.b)("h3",{id:"installation"},"Installation"),Object(l.b)("p",null,"In order to install the latest distribution of ",Object(l.b)("a",{parentName:"p",href:"https://www.r-project.org/"},"R\nsoftware")," to your computer you have to\nselect one of the mirror sites of the ",Object(l.b)("a",{parentName:"p",href:"https://cran.r-project.org/"},"Comprehensive R Archive\nNetwork"),", select the appropriate link for\nyour operating system and follow the wizard instructions."),Object(l.b)("p",null,"For windows users you can:"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"Go to CRAN"),Object(l.b)("li",{parentName:"ol"},"Click download R for Windows"),Object(l.b)("li",{parentName:"ol"},"Click Base (This is what you want to install R for the first time)"),Object(l.b)("li",{parentName:"ol"},"Download the latest R version"),Object(l.b)("li",{parentName:"ol"},"Run installation file and follow the instrustions of the installer.")),Object(l.b)("p",null,"(Mac) OS X and Linux users may need to follow different steps depending\non their system version to install R successfully and it is recommended\nto read the instructions on CRAN site carefully."),Object(l.b)("p",null,"Even more detailed installation instructions can be found in ",Object(l.b)("a",{parentName:"p",href:"https://cran.r-project.org/doc/manuals/R-admin.html"},"R\nInstallation and Administration\nmanual"),"."),Object(l.b)("p",null,"To install ",Object(l.b)("a",{parentName:"p",href:"https://www.rstudio.com/"},"RStudio"),", you can download\n",Object(l.b)("a",{parentName:"p",href:"https://www.rstudio.com/products/rstudio/download/"},"RStudio Desktop"),"\nwith Open Source License and follow the wizard instructions:"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"Go to ",Object(l.b)("a",{parentName:"li",href:"https://www.rstudio.com/products/rstudio/"},"RStudio")),Object(l.b)("li",{parentName:"ol"},"Click download on RStudio Desktop"),Object(l.b)("li",{parentName:"ol"},"Download on RStudio Desktop free download"),Object(l.b)("li",{parentName:"ol"},"Select the appropriate file for your system"),Object(l.b)("li",{parentName:"ol"},"Run installation file")),Object(l.b)("p",null,"To install the ",Object(l.b)("inlineCode",{parentName:"p"},"tableschema")," library it is necessary to install first\n",Object(l.b)("inlineCode",{parentName:"p"},"devtools")," library to make installation of github libraries available."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},'# Install devtools package if not already\ninstall.packages("devtools")\n')),Object(l.b)("p",null,"Install ",Object(l.b)("inlineCode",{parentName:"p"},"tableschema.r")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},'# from CRAN version\ninstall.packages("tableschema.r")\n\n# or install the development version from github\ndevtools::install_github("frictionlessdata/tableschema-r")\n')),Object(l.b)("h3",{id:"load-library"},"Load library"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},'# Install devtools package if not already\n# install.packages("jsonlite")\nlibrary(jsonlite)\n# Install devtools package if not already\n# install.packages("future")\nlibrary(future)\n# load the library using\nlibrary(tableschema.r)\n')),Object(l.b)("h2",{id:"documentation"},"Documentation"),Object(l.b)("p",null,Object(l.b)("a",{parentName:"p",href:"https://CRAN.R-project.org/package=jsonlite"},"Jsonlite package")," is\ninternally used to convert json data to list objects. The input\nparameters of functions could be json strings, files or lists and the\noutputs are in list format to easily further process your data in R\nenvironment and exported as desired. The examples below show how to use\njsonlite package to convert the output back to json adding indentation\nwhitespace. More details about handling json you can see jsonlite\ndocumentation or vignettes\n",Object(l.b)("a",{parentName:"p",href:"https://CRAN.R-project.org/package=jsonlite"},"here"),"."),Object(l.b)("p",null,"Moreover ",Object(l.b)("a",{parentName:"p",href:"https://CRAN.R-project.org/package=future"},"future package")," is\nalso used to load and create Table and Schema classes asynchronously. To\nretrieve the actual result of the loaded Table or Schema you have to use\n",Object(l.b)("inlineCode",{parentName:"p"},"value(...)")," to the variable you stored the loaded Table/Schema. More\ndetails about future package and sequential and parallel processing you\ncan find ",Object(l.b)("a",{parentName:"p",href:"https://CRAN.R-project.org/package=future"},"here"),"."),Object(l.b)("h3",{id:"working-with-table"},"Working with Table"),Object(l.b)("p",null,"A table is a core concept in a tabular data world. It represents a data\nwith a metadata (Table Schema). Let\u2019s see how we could use it in\npractice."),Object(l.b)("p",null,"Consider we have some local csv file. It could be inline data or remote\nlink - all supported by ",Object(l.b)("inlineCode",{parentName:"p"},"Table")," class (except local files for in-brower\nusage of course). But say it\u2019s ",Object(l.b)("inlineCode",{parentName:"p"},"data.csv")," for now:"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"data/cities.csv")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-csv"},'city,location\nlondon,"51.50,-0.11"\nparis,"48.85,2.30"\nrome,N/A\n')),Object(l.b)("p",null,"Let\u2019s create and read a table. We use static ",Object(l.b)("inlineCode",{parentName:"p"},"Table.load")," method and\n",Object(l.b)("inlineCode",{parentName:"p"},"table.read")," method with a ",Object(l.b)("inlineCode",{parentName:"p"},"keyed")," option to get list of keyed rows:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"def = Table.load('inst/extdata/data.csv')\ntable = value(def)\n# add indentation whitespace to JSON output with jsonlite package\ntoJSON(table$read(keyed = TRUE), pretty = TRUE) # function from jsonlite package\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## [\n##   {\n##     "city": ["london"],\n##     "location": ["\\"51.50 -0.11\\""]\n##   },\n##   {\n##     "city": ["paris"],\n##     "location": ["\\"48.85 2.30\\""]\n##   },\n##   {\n##     "city": ["rome"],\n##     "location": ["N/A"]\n##   }\n## ]\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"table.headers = table$headers\ntable.headers\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## [[1]]\n## [1] "city"\n##\n## [[2]]\n## [1] "location"\n')),Object(l.b)("p",null,"As we could see our locations are just a strings. But it should be\ngeopoints. Also Rome\u2019s location is not available but it\u2019s also just a\n",Object(l.b)("inlineCode",{parentName:"p"},"N/A")," string instead of ",Object(l.b)("inlineCode",{parentName:"p"},"null"),". First we have to infer Table Schema:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"# add indentation whitespace to JSON output with jsonlite package\ntoJSON(table$infer(), pretty = TRUE) # function from jsonlite package\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## {\n##   "fields": [\n##     {\n##       "name": ["city"],\n##       "type": ["string"],\n##       "format": ["default"]\n##     },\n##     {\n##       "name": ["location"],\n##       "type": ["string"],\n##       "format": ["default"]\n##     }\n##   ],\n##   "missingValues": [\n##     [""]\n##   ]\n## }\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"toJSON(table$schema$descriptor, pretty = TRUE) # function from jsonlite package\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## {\n##   "fields": [\n##     {\n##       "name": ["city"],\n##       "type": ["string"],\n##       "format": ["default"]\n##     },\n##     {\n##       "name": ["location"],\n##       "type": ["string"],\n##       "format": ["default"]\n##     }\n##   ],\n##   "missingValues": [\n##     [""]\n##   ]\n## }\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"table$read(keyed = TRUE) # Fails\n")),Object(l.b)("p",null,"Let\u2019s fix not available location. There is a ",Object(l.b)("inlineCode",{parentName:"p"},"missingValues")," property in\nTable Schema specification. As a first try we set ",Object(l.b)("inlineCode",{parentName:"p"},"missingValues")," to\n",Object(l.b)("inlineCode",{parentName:"p"},"N/A")," in ",Object(l.b)("inlineCode",{parentName:"p"},"table$schema$descriptor"),". Schema descriptor could be changed\nin-place but all changes should be commited by ",Object(l.b)("inlineCode",{parentName:"p"},"table$schema$commit()"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"table$schema$descriptor['missingValues'] = 'N/A'\ntable$schema$commit()\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## [1] TRUE\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"table$schema$valid # false\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## [1] FALSE\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"table$schema$errors\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## [[1]]\n## [1] "Descriptor validation error:\\n            data.missingValues - is the wrong type"\n')),Object(l.b)("p",null,"As a good citiziens we\u2019ve decided to check out schema descriptor\nvalidity. And it\u2019s not valid","!"," We sould use an list for ",Object(l.b)("inlineCode",{parentName:"p"},"missingValues"),"\nproperty. Also don\u2019t forget to have an empty string as a missing value:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"table$schema$descriptor[['missingValues']] = list(\"\", 'N/A')\ntable$schema$commit()\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## [1] TRUE\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"table$schema$valid # true\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## [1] TRUE\n")),Object(l.b)("p",null,"All good. It looks like we\u2019re ready to read our data again:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"table$read() # or\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"toJSON(table$read(), pretty = TRUE) # function from jsonlite package\n")),Object(l.b)("p",null,"Now we see that:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"locations are lists with numeric lattide and longitude")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Rome\u2019s location is ",Object(l.b)("inlineCode",{parentName:"p"},"null")))),Object(l.b)("p",null,"And because there are no errors on data reading we could be sure that\nour data is valid againt our schema. Let\u2019s save it:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"table$schema$save('schema.json')\ntable$save('data.csv')\n")),Object(l.b)("p",null,"Our ",Object(l.b)("inlineCode",{parentName:"p"},"data.csv")," looks the same because it has been stringified back to\n",Object(l.b)("inlineCode",{parentName:"p"},"csv")," format. But now we have ",Object(l.b)("inlineCode",{parentName:"p"},"schema.json"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-json"},'{\n"fields": [\n{\n"name": "city",\n"type": "string",\n"format": "default"\n},\n{\n"name": "location",\n"type": "geopoint",\n"format": "default"\n}\n],\n"missingValues": [\n"",\n"N/A"\n]\n}\n')),Object(l.b)("p",null,"If we decide to improve it even more we could update the schema file and\nthen open it again. But now providing a schema path."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"def = Table.load('inst/extdata/data.csv', schema = 'inst/extdata/schema.json')\ntable = value(def)\ntable\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## <Table>\n##   Public:\n##     clone: function (deep = FALSE)\n##     headers: active binding\n##     infer: function (limit = 100)\n##     initialize: function (src, schema = NULL, strict = FALSE, headers = 1)\n##     iter: function (keyed, extended, cast = TRUE, relations = FALSE, stream = FALSE)\n##     read: function (keyed = FALSE, extended = FALSE, cast = TRUE, relations = FALSE,\n##     save: function (connection)\n##     schema: active binding\n##   Private:\n##     createRowStream_: function (src)\n##     createUniqueFieldsCache: function (schema)\n##     currentStream_: NULL\n##     headers_: NULL\n##     headersRow_: 1\n##     rowNumber_: 0\n##     schema_: Schema, R6\n##     src: inst/extdata/data.csv\n##     strict_: FALSE\n##     uniqueFieldsCache_: list\n")),Object(l.b)("p",null,"It was only basic introduction to the ",Object(l.b)("inlineCode",{parentName:"p"},"Table")," class. To learn more let\u2019s\ntake a look on ",Object(l.b)("inlineCode",{parentName:"p"},"Table")," class API reference."),Object(l.b)("h2",{id:"working-with-schema"},"Working with Schema"),Object(l.b)("p",null,"A model of a schema with helpful methods for working with the schema and\nsupported data. Schema instances can be initialized with a schema source\nas a url to a JSON file or a JSON object. The schema is initially\nvalidated (see ",Object(l.b)("a",{parentName:"p",href:"#validate"},"validate")," below). By default validation\nerrors will be stored in ",Object(l.b)("inlineCode",{parentName:"p"},"schema$errors")," but in a strict mode it will be\ninstantly raised."),Object(l.b)("p",null,"Let\u2019s create a blank schema. It\u2019s not valid because ",Object(l.b)("inlineCode",{parentName:"p"},"descriptor$fields"),"\nproperty is required by the ",Object(l.b)("a",{parentName:"p",href:"http://specs.frictionlessdata.io/table-schema/"},"Table\nSchema")," specification:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"def = Schema.load({})\nschema = value(def)\nschema$valid # false\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## [1] FALSE\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"schema$errors\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## [[1]]\n## [1] "Descriptor validation error:\\n            data.fields - is required"\n')),Object(l.b)("p",null,"To do not create a schema descriptor by hands we will use a\n",Object(l.b)("inlineCode",{parentName:"p"},"schema$infer")," method to infer the descriptor from given data:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},'toJSON(\n  schema$infer(helpers.from.json.to.list(\'[\n    ["id", "age", "name"],\n    ["1","39","Paul"],\n    ["2","23","Jimmy"],\n    ["3","36","Jane"],\n    ["4","28","Judy"]\n    ]\')), pretty = TRUE) # function from jsonlite package\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## {\n##   "fields": [\n##     {\n##       "name": ["id"],\n##       "type": ["integer"]\n##     },\n##     {\n##       "name": ["age"],\n##       "type": ["integer"]\n##     },\n##     {\n##       "name": ["name"],\n##       "type": ["string"]\n##     }\n##   ]\n## }\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"schema$valid # true\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## [1] TRUE\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"toJSON(\n  schema$descriptor,\n  pretty = TRUE) # function from jsonlite package\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## {\n##   "fields": [\n##     {\n##       "name": ["id"],\n##       "type": ["integer"],\n##       "format": ["default"]\n##     },\n##     {\n##       "name": ["age"],\n##       "type": ["integer"],\n##       "format": ["default"]\n##     },\n##     {\n##       "name": ["name"],\n##       "type": ["string"],\n##       "format": ["default"]\n##     }\n##   ],\n##   "missingValues": [\n##     [""]\n##   ]\n## }\n')),Object(l.b)("p",null,"Now we have an inferred schema and it\u2019s valid. We could cast data row\nagainst our schema. We provide a string input by an output will be cast\ncorrespondingly:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},'toJSON(\n  schema$castRow(helpers.from.json.to.list(\'["5", "66", "Sam"]\')),\n  pretty = TRUE, auto_unbox = TRUE) # function from jsonlite package\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## [\n##   5,\n##   66,\n##   "Sam"\n## ]\n')),Object(l.b)("p",null,"But if we try provide some missing value to ",Object(l.b)("inlineCode",{parentName:"p"},"age")," field cast will fail\nbecause for now only one possible missing value is an empty string.\nLet\u2019s update our schema:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},'schema$castRow(helpers.from.json.to.list(\'["6", "N/A", "Walt"]\'))\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## Error in schema$castRow(helpers.from.json.to.list("[\\"6\\", \\"N/A\\", \\"Walt\\"]")): There are 1 cast errors (see following - Wrong type for header: age and value: N/A\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"# Cast error\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"schema$descriptor$missingValues = list('', 'NA')\nschema$commit()\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## [1] TRUE\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},'schema$castRow(helpers.from.json.to.list(\'["6", "", "Walt"]\'))\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## [[1]]\n## [1] 6\n##\n## [[2]]\n## NULL\n##\n## [[3]]\n## [1] "Walt"\n')),Object(l.b)("p",null,"We could save the schema to a local file. And we could continue the work\nin any time just loading it from the local file:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"schema$save('schema.json')\nschema = Schema.load('schema.json')\n")),Object(l.b)("p",null,"It was only basic introduction to the ",Object(l.b)("inlineCode",{parentName:"p"},"Schema")," class. To learn more\nlet\u2019s take a look on ",Object(l.b)("inlineCode",{parentName:"p"},"Schema")," class API reference."),Object(l.b)("h3",{id:"working-with-field"},"Working with Field"),Object(l.b)("p",null,"Class represents field in the schema."),Object(l.b)("p",null,"Data values can be cast to native R types. Casting a value will check\nthe value is of the expected type, is in the correct format, and\ncomplies with any constraints imposed by a schema."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-json"},'{\n"name": "birthday",\n"type": "date",\n"format": "default",\n"constraints": {\n"required": true,\n"minimum": "2015-05-30"\n}\n}\n')),Object(l.b)("p",null,"Following code will not raise the exception, despite the fact our date\nis less than minimum constraints in the field, because we do not check\nconstraints of the field descriptor"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},'field = Field$new(helpers.from.json.to.list(\'{"name": "name", "type": "number"}\'))\ndateType = field$cast_value(\'12345\') # cast\ndateType # print the result\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## [1] 12345\n")),Object(l.b)("p",null,"And following example will raise exception, because we set flag \u2018skip\nconstraints\u2019 to ",Object(l.b)("inlineCode",{parentName:"p"},"false"),", and our date is less than allowed by ",Object(l.b)("inlineCode",{parentName:"p"},"minimum"),"\nconstraints of the field. Exception will be raised as well in situation\nof trying to cast non-date format values, or empty values"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"tryCatch(\n  dateType = field$cast_value(value = '2014-05-29', constraints = FALSE),\n  error = function(e){# uh oh, something went wrong\n  })\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## Error in private$castValue(...): Field character(0) can't cast value 2014-05-29 for type number with format default\n")),Object(l.b)("p",null,"Values that can\u2019t be cast will raise an ",Object(l.b)("inlineCode",{parentName:"p"},"Error")," exception. Casting a\nvalue that doesn\u2019t meet the constraints will raise an ",Object(l.b)("inlineCode",{parentName:"p"},"Error")," exception."),Object(l.b)("p",null,"Table below shows the available types, formats and resultant value of\nthe cast:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:"left"},"Type"),Object(l.b)("th",{parentName:"tr",align:"left"},"Formats"),Object(l.b)("th",{parentName:"tr",align:"left"},"Casting result"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"any"),Object(l.b)("td",{parentName:"tr",align:"left"},"default"),Object(l.b)("td",{parentName:"tr",align:"left"},"Any")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"list"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"default")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"boolean"),Object(l.b)("td",{parentName:"tr",align:"left"},"default"),Object(l.b)("td",{parentName:"tr",align:"left"},"Boolean")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"date"),Object(l.b)("td",{parentName:"tr",align:"left"},"default, any"),Object(l.b)("td",{parentName:"tr",align:"left"},"Date")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"datetime"),Object(l.b)("td",{parentName:"tr",align:"left"},"default, any"),Object(l.b)("td",{parentName:"tr",align:"left"},"Date")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"duration"),Object(l.b)("td",{parentName:"tr",align:"left"},"default"),Object(l.b)("td",{parentName:"tr",align:"left"},"Duration")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"geojson"),Object(l.b)("td",{parentName:"tr",align:"left"},"default, topojson"),Object(l.b)("td",{parentName:"tr",align:"left"},"Object")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"geopoint"),Object(l.b)("td",{parentName:"tr",align:"left"},"default, list, object"),Object(l.b)("td",{parentName:"tr",align:"left"},"[","Number, Number","]")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"integer"),Object(l.b)("td",{parentName:"tr",align:"left"},"default"),Object(l.b)("td",{parentName:"tr",align:"left"},"Number")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"number"),Object(l.b)("td",{parentName:"tr",align:"left"},"default"),Object(l.b)("td",{parentName:"tr",align:"left"},"Number")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"object"),Object(l.b)("td",{parentName:"tr",align:"left"},"default"),Object(l.b)("td",{parentName:"tr",align:"left"},"Object")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"string"),Object(l.b)("td",{parentName:"tr",align:"left"},"default, uri, email, binary"),Object(l.b)("td",{parentName:"tr",align:"left"},"String")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"time"),Object(l.b)("td",{parentName:"tr",align:"left"},"default, any"),Object(l.b)("td",{parentName:"tr",align:"left"},"Date")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"year"),Object(l.b)("td",{parentName:"tr",align:"left"},"default"),Object(l.b)("td",{parentName:"tr",align:"left"},"Number")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"yearmonth"),Object(l.b)("td",{parentName:"tr",align:"left"},"default"),Object(l.b)("td",{parentName:"tr",align:"left"},"[","Number, Number","]")))),Object(l.b)("h4",{id:"working-with-validate"},"Working with Validate"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"validate()")," validates whether a ",Object(l.b)("strong",{parentName:"p"},"schema")," is a validate Table Schema\naccordingly to the\n",Object(l.b)("a",{parentName:"p",href:"https://frictionlessdata.io/schemas/table-schema.json"},"specifications"),".\nIt does ",Object(l.b)("strong",{parentName:"p"},"not")," validate data against a schema.")),Object(l.b)("p",null,"Given a schema descriptor ",Object(l.b)("inlineCode",{parentName:"p"},"validate")," returns a validation object:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"valid_errors = validate('inst/extdata/schema.json')\nvalid_errors\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## $valid\n## [1] TRUE\n##\n## $errors\n## list()\n")),Object(l.b)("h4",{id:"working-with-infer"},"Working with Infer"),Object(l.b)("p",null,"Given data source and headers ",Object(l.b)("inlineCode",{parentName:"p"},"infer")," will return a Table Schema as a\nJSON object based on the data values."),Object(l.b)("p",null,"Given the data file, example.csv:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-csv"},"id,age,name\n1,39,Paul\n2,23,Jimmy\n3,36,Jane\n4,28,Judy\n")),Object(l.b)("p",null,"Call ",Object(l.b)("inlineCode",{parentName:"p"},"infer")," with headers and values from the datafile:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"descriptor = infer('inst/extdata/data_infer.csv')\n")),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"descriptor")," variable is now a list object that can easily converted\nto JSON:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"toJSON(\n  descriptor,\n  pretty = TRUE\n) # function from jsonlite package\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## {\n##   "fields": [\n##     {\n##       "name": ["id"],\n##       "type": ["integer"],\n##       "format": ["default"]\n##     },\n##     {\n##       "name": ["age"],\n##       "type": ["integer"],\n##       "format": ["default"]\n##     },\n##     {\n##       "name": ["name"],\n##       "type": ["string"],\n##       "format": ["default"]\n##     }\n##   ],\n##   "missingValues": [\n##     [""]\n##   ]\n## }\n')),Object(l.b)("h2",{id:"api-reference"},"API Reference"),Object(l.b)("h3",{id:"table"},"Table"),Object(l.b)("p",null,"Table representation"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Table"},"Table"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("em",{parentName:"li"},"instance"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Table+headers"},"$headers")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"List.\\<string\\>")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Table+schema"},"$schema")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"Schema")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Table+iter"},"$iter(keyed, extended, cast, forceCast, relations,\nstream)")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"AsyncIterator")," |\n",Object(l.b)("inlineCode",{parentName:"li"},"Stream")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Table+read"},"$read(limit)")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"List.\\<List\\>")," |\n",Object(l.b)("inlineCode",{parentName:"li"},"List.\\<Object\\>")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Table+infer"},"$infer(limit)")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"Object")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Table+save"},"$save(target)")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"Boolean")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("em",{parentName:"li"},"static"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Table.load"},".load(source, schema, strict, headers,\nparserOptions)")," \u21d2 ",Object(l.b)("a",{parentName:"li",href:"#Table"},Object(l.b)("inlineCode",{parentName:"a"},"Table")))))))),Object(l.b)("h4",{id:"tableheaders--liststring"},"table$headers \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"List.\\<string\\>")),Object(l.b)("p",null,"Headers"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"List.\\<string\\>")," - data source headers"),Object(l.b)("h4",{id:"tableschema--schema"},"table$schema \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"Schema")),Object(l.b)("p",null,"Schema"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"Schema")," - table schema instance"),Object(l.b)("h4",{id:"tableiterkeyed-extended-cast-forcecast-relations-stream--asynciterator--stream"},"table$iter(keyed, extended, cast, forceCast, relations, stream) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"AsyncIterator")," | ",Object(l.b)("inlineCode",{parentName:"h4"},"Stream")),Object(l.b)("p",null,"Iterate through the table data"),Object(l.b)("p",null,"And emits rows cast based on table schema (async for loop). With a\n",Object(l.b)("inlineCode",{parentName:"p"},"stream")," flag instead of async iterator a Node stream will be returned.\nData casting can be disabled."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"AsyncIterator")," | ",Object(l.b)("inlineCode",{parentName:"p"},"Stream")," - async\niterator/stream of rows: - ",Object(l.b)("inlineCode",{parentName:"p"},"[value1, value2]")," - base - ",Object(l.b)("inlineCode",{parentName:"p"},"{header1:\nvalue1, header2: value2}")," - keyed - ",Object(l.b)("inlineCode",{parentName:"p"},"[rowNumber, [header1, header2],\n[value1, value2]]")," - extended ",Object(l.b)("strong",{parentName:"p"},"Throws"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TableSchemaError")," raises any error occurred in this\nprocess")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"keyed"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"iter keyed rows")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"extended"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"iter extended rows")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"cast"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"disable data casting if false")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"forceCast"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"instead of raising on the first row with cast error return an error object to replace failed row. It will allow to iterate over the whole data file even if it\u2019s not compliant to the schema. Example of output stream: ",Object(l.b)("inlineCode",{parentName:"td"},"[['val1', 'val2'], TableSchemaError, ['val3', 'val4'], ...]"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"relations"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Object")),Object(l.b)("td",{parentName:"tr",align:null},"object of foreign key references in a form of ",Object(l.b)("inlineCode",{parentName:"td"},"{resource1: [{field1: value1, field2: value2}, ...], ...}"),". If provided foreign key fields will checked and resolved to its references")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"stream"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"return Node Readable Stream of table rows")))),Object(l.b)("h4",{id:"tablereadlimit--listlist--listobject"},"table$read(limit) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"List.\\<List\\>")," | ",Object(l.b)("inlineCode",{parentName:"h4"},"List.\\<Object\\>")),Object(l.b)("p",null,"Read the table data into memory"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"The API is the same as ",Object(l.b)("inlineCode",{parentName:"p"},"table.iter")," has except for:")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"List.\\<List\\>")," | ",Object(l.b)("inlineCode",{parentName:"p"},"List.\\<Object\\>")," -\nlist of rows: - ",Object(l.b)("inlineCode",{parentName:"p"},"[value1, value2]")," - base - ",Object(l.b)("inlineCode",{parentName:"p"},"{header1: value1, header2:\nvalue2}")," - keyed - ",Object(l.b)("inlineCode",{parentName:"p"},"[rowNumber, [header1, header2], [value1, value2]]")," -\nextended"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"limit"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"integer")),Object(l.b)("td",{parentName:"tr",align:null},"limit of rows to read")))),Object(l.b)("h4",{id:"tableinferlimit--object"},"table$infer(limit) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"Object")),Object(l.b)("p",null,"Infer a schema for the table."),Object(l.b)("p",null,"It will infer and set Table Schema to ",Object(l.b)("inlineCode",{parentName:"p"},"table.schema")," based on table\ndata."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"Object")," - Table Schema descriptor"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"limit"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"number")),Object(l.b)("td",{parentName:"tr",align:null},"limit rows sample size")))),Object(l.b)("h4",{id:"tablesavetarget--boolean"},"table$save(target) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"Boolean")),Object(l.b)("p",null,"Save data source to file locally in CSV format with ",Object(l.b)("inlineCode",{parentName:"p"},",")," (comma)\ndelimiter"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"Boolean")," - true on success ",Object(l.b)("strong",{parentName:"p"},"Throws"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TableSchemaError")," an error if there is saving problem")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"target"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string")),Object(l.b)("td",{parentName:"tr",align:null},"path where to save a table data")))),Object(l.b)("h4",{id:"tableloadsource-schema-strict-headers-parseroptions--table"},"Table.load(source, schema, strict, headers, parserOptions) \u21d2 ",Object(l.b)("a",{parentName:"h4",href:"#Table"},Object(l.b)("inlineCode",{parentName:"a"},"Table"))),Object(l.b)("p",null,"Factory method to instantiate ",Object(l.b)("inlineCode",{parentName:"p"},"Table")," class."),Object(l.b)("p",null,"This method is async and it should be used with await keyword or as a\n",Object(l.b)("inlineCode",{parentName:"p"},"Promise"),". If ",Object(l.b)("inlineCode",{parentName:"p"},"references")," argument is provided foreign keys will be\nchecked on any reading operation."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("a",{parentName:"p",href:"#Table"},Object(l.b)("inlineCode",{parentName:"a"},"Table"))," - data table class instance\n",Object(l.b)("strong",{parentName:"p"},"Throws"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TableSchemaError")," raises any error occurred in table\ncreation process")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"source"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"List.\\<List\\>"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"schema"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Object"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"strict"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"strictness option to pass to ",Object(l.b)("inlineCode",{parentName:"td"},"Schema")," constructor")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"headers"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"number")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"List.\\<string\\>"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"parserOptions"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Object")),Object(l.b)("td",{parentName:"tr",align:null},"options to be used by CSV parser. All options listed at ",Object(l.b)("a",{parentName:"td",href:"https://csv.js.org/parse/options/"},"https://csv.js.org/parse/options/"),". By default ",Object(l.b)("inlineCode",{parentName:"td"},"ltrim")," is true according to the CSV Dialect spec.")))),Object(l.b)("h3",{id:"schema"},"Schema"),Object(l.b)("p",null,"Schema representation"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema"},"Schema"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("em",{parentName:"li"},"instance"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+valid"},"$valid")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"Boolean")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+errors"},"$errors")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"List.\\<Error\\>")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+descriptor"},"$descriptor")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"Object")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+primaryKey"},"$primaryKey")," \u21d2\n",Object(l.b)("inlineCode",{parentName:"li"},"List.\\<string\\>")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+foreignKeys"},"$foreignKeys")," \u21d2\n",Object(l.b)("inlineCode",{parentName:"li"},"List.\\<Object\\>")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+fields"},"$fields")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"List.\\<Field\\>")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+fieldNames"},"$fieldNames")," \u21d2\n",Object(l.b)("inlineCode",{parentName:"li"},"List.\\<string\\>")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+getField"},"$getField(fieldName)")," \u21d2\n",Object(l.b)("inlineCode",{parentName:"li"},"Field")," | ",Object(l.b)("inlineCode",{parentName:"li"},"null")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+addField"},"$addField(descriptor)")," \u21d2\n",Object(l.b)("inlineCode",{parentName:"li"},"Field")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+removeField"},"$removeField(name)")," \u21d2\n",Object(l.b)("inlineCode",{parentName:"li"},"Field")," | ",Object(l.b)("inlineCode",{parentName:"li"},"null")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+castRow"},"$castRow(row, failFalst)")," \u21d2\n",Object(l.b)("inlineCode",{parentName:"li"},"List.\\<List\\>")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+infer"},"$infer(rows, headers)")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"Object")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+commit"},"$commit(strict)")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"Boolean")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema+save"},"$save(target)")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"boolean")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("em",{parentName:"li"},"static"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Schema.load"},".load(descriptor, strict)")," \u21d2\n",Object(l.b)("a",{parentName:"li",href:"#Schema"},Object(l.b)("inlineCode",{parentName:"a"},"Schema")))))))),Object(l.b)("h4",{id:"schemavalid--boolean"},"schema$valid \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"Boolean")),Object(l.b)("p",null,"Validation status"),Object(l.b)("p",null,"It always ",Object(l.b)("inlineCode",{parentName:"p"},"true")," in strict mode."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"Boolean")," - returns validation status"),Object(l.b)("h4",{id:"schemaerrors--listerror"},"schema$errors \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"List.\\<Error\\>")),Object(l.b)("p",null,"Validation errors"),Object(l.b)("p",null,"It always empty in strict mode."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"List.\\<Error\\>")," - returns validation errors"),Object(l.b)("h4",{id:"schemadescriptor--object"},"schema$descriptor \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"Object")),Object(l.b)("p",null,"Descriptor"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"Object")," - schema descriptor"),Object(l.b)("h4",{id:"schemaprimarykey--liststring"},"schema$primaryKey \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"List.\\<string\\>")),Object(l.b)("p",null,"Primary Key"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"List.\\<string\\>")," - schema primary key"),Object(l.b)("h4",{id:"schemaforeignkeys--listobject"},"schema$foreignKeys \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"List.\\<Object\\>")),Object(l.b)("p",null,"Foreign Keys"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"List.\\<Object\\>")," - schema foreign keys"),Object(l.b)("h4",{id:"schemafields--listfield"},"schema$fields \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"List.\\<Field\\>")),Object(l.b)("p",null,"Fields"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"List.\\<Field\\>")," - schema fields"),Object(l.b)("h4",{id:"schemafieldnames--liststring"},"schema$fieldNames \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"List.\\<string\\>")),Object(l.b)("p",null,"Field names"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"List.\\<string\\>")," - schema field names"),Object(l.b)("h4",{id:"schemagetfieldfieldname--field--null"},"schema$getField(fieldName) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"Field")," | ",Object(l.b)("inlineCode",{parentName:"h4"},"null")),Object(l.b)("p",null,"Return a field"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"Field")," | ",Object(l.b)("inlineCode",{parentName:"p"},"null")," - field instance if\nexists"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"fieldName"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string"))))),Object(l.b)("h4",{id:"schemaaddfielddescriptor--field"},"schema$addField(descriptor) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"Field")),Object(l.b)("p",null,"Add a field"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"Field")," - added field instance"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"descriptor"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Object"))))),Object(l.b)("h4",{id:"schemaremovefieldname--field--null"},"schema$removeField(name) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"Field")," | ",Object(l.b)("inlineCode",{parentName:"h4"},"null")),Object(l.b)("p",null,"Remove a field"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"Field")," | ",Object(l.b)("inlineCode",{parentName:"p"},"null")," - removed field\ninstance if exists"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"name"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string"))))),Object(l.b)("h4",{id:"schemacastrowrow-failfalst--listlist"},"schema$castRow(row, failFalst) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"List.\\<List\\>")),Object(l.b)("p",null,"Cast row based on field types and formats."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"List.\\<List\\>")," - cast data row"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"row"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"List.\\<List\\>")),Object(l.b)("td",{parentName:"tr",align:null},"data row as an list of values")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"failFalst"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null})))),Object(l.b)("h4",{id:"schemainferrows-headers--object"},"schema$infer(rows, headers) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"Object")),Object(l.b)("p",null,"Infer and set ",Object(l.b)("inlineCode",{parentName:"p"},"schema.descriptor")," based on data sample."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"Object")," - Table Schema descriptor"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"rows"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"List.\\<List\\>")),Object(l.b)("td",{parentName:"tr",align:null},"list of lists representing rows")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"headers"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"integer")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"List.\\<string\\>"))))),Object(l.b)("h4",{id:"schemacommitstrict--boolean"},"schema$commit(strict) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"Boolean")),Object(l.b)("p",null,"Update schema instance if there are in-place changes in the descriptor."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"Boolean")," - returns true on success and false if\nnot modified ",Object(l.b)("strong",{parentName:"p"},"Throws"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TableSchemaError")," raises any error occurred in the\nprocess")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"strict"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"alter ",Object(l.b)("inlineCode",{parentName:"td"},"strict")," mode for further work")))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},'descriptor <- \'{"fields": [{"name": "field", "type": "string"}]}\'\ndef <- Schema.load(descriptor)\nschema <- value(def)\nschema$getField(\'name\')\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## NULL\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"schema$descriptor$fields[[1]]$type\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## [1] "string"\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"schema$descriptor$fields[[1]]$type <-'number'\nschema$descriptor$fields[[1]]$type\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'## [1] "number"\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"schema$commit()\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"## [1] TRUE\n")),Object(l.b)("h4",{id:"schemasavetarget--boolean"},"schema$save(target) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"boolean")),Object(l.b)("p",null,"Save schema descriptor to target destination."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"boolean")," - returns true on success ",Object(l.b)("strong",{parentName:"p"},"Throws"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TableSchemaError")," raises any error occurred in the\nprocess")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"target"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string")),Object(l.b)("td",{parentName:"tr",align:null},"path where to save a descriptor")))),Object(l.b)("h4",{id:"schemaloaddescriptor-strict--schema"},"Schema.load(descriptor, strict) \u21d2 ",Object(l.b)("a",{parentName:"h4",href:"#Schema"},Object(l.b)("inlineCode",{parentName:"a"},"Schema"))),Object(l.b)("p",null,"Factory method to instantiate ",Object(l.b)("inlineCode",{parentName:"p"},"Schema")," class."),Object(l.b)("p",null,"This method is async and it should be used with await keyword or as a\n",Object(l.b)("inlineCode",{parentName:"p"},"Promise"),"."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("a",{parentName:"p",href:"#Schema"},Object(l.b)("inlineCode",{parentName:"a"},"Schema"))," - returns schema class\ninstance ",Object(l.b)("strong",{parentName:"p"},"Throws"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TableSchemaError")," raises any error occurred in the\nprocess")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"descriptor"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Object"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"strict"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"flag to alter validation behaviour: - if false error will not be raised and all error will be collected in ",Object(l.b)("inlineCode",{parentName:"td"},"schema.errors")," - if strict is true any validation error will be raised immediately")))),Object(l.b)("h3",{id:"field"},"Field"),Object(l.b)("p",null,"Field representation"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Field"},"Field"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#new_Field_new"},"new Field(descriptor, missingValues)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Field+name"},"$name")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"string")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Field+type"},"$type")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"string")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Field+format"},"$format")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"string")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Field+required"},"$required")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"boolean")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Field+constraints"},"$constraints")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"Object")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Field+descriptor"},"$descriptor")," \u21d2 ",Object(l.b)("inlineCode",{parentName:"li"},"Object")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Field+castValue"},"$castValue(value, constraints)")," \u21d2\n",Object(l.b)("inlineCode",{parentName:"li"},"any")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#Field+testValue"},"$testValue(value, constraints)")," \u21d2\n",Object(l.b)("inlineCode",{parentName:"li"},"boolean"))))),Object(l.b)("h4",{id:"new-fielddescriptor-missingvalues"},"new Field(descriptor, missingValues)"),Object(l.b)("p",null,"Constructor to instantiate ",Object(l.b)("inlineCode",{parentName:"p"},"Field")," class."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("a",{parentName:"p",href:"#Field"},Object(l.b)("inlineCode",{parentName:"a"},"Field"))," - returns field class instance\n",Object(l.b)("strong",{parentName:"p"},"Throws"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TableSchemaError")," raises any error occured in the\nprocess")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"descriptor"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Object")),Object(l.b)("td",{parentName:"tr",align:null},"schema field descriptor")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"missingValues"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"List.\\<string\\>")),Object(l.b)("td",{parentName:"tr",align:null},"an list with string representing missing values")))),Object(l.b)("h4",{id:"fieldname--string"},"field$name \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"string")),Object(l.b)("p",null,"Field name"),Object(l.b)("h4",{id:"fieldtype--string"},"field$type \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"string")),Object(l.b)("p",null,"Field type"),Object(l.b)("h4",{id:"fieldformat--string"},"field$format \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"string")),Object(l.b)("p",null,"Field format"),Object(l.b)("h4",{id:"fieldrequired--boolean"},"field$required \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"boolean")),Object(l.b)("p",null,"Return true if field is required"),Object(l.b)("h4",{id:"fieldconstraints--object"},"field$constraints \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"Object")),Object(l.b)("p",null,"Field constraints"),Object(l.b)("h4",{id:"fielddescriptor--object"},"field$descriptor \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"Object")),Object(l.b)("p",null,"Field descriptor"),Object(l.b)("h4",{id:"fieldcastvaluevalue-constraints--any"},"field$castValue(value, constraints) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"any")),Object(l.b)("p",null,"Cast value"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"any")," - cast value"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"value"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"any")),Object(l.b)("td",{parentName:"tr",align:null},"value to cast")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"constraints"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Object")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"false"))))),Object(l.b)("h4",{id:"fieldtestvaluevalue-constraints--boolean"},"field$testValue(value, constraints) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h4"},"boolean")),Object(l.b)("p",null,"Check if value can be cast"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"value"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"any")),Object(l.b)("td",{parentName:"tr",align:null},"value to test")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"constraints"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Object")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"false"))))),Object(l.b)("h3",{id:"validatedescriptor--object"},"validate(descriptor) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h3"},"Object")),Object(l.b)("p",null,"This function is async so it has to be used with ",Object(l.b)("inlineCode",{parentName:"p"},"await")," keyword or as a\n",Object(l.b)("inlineCode",{parentName:"p"},"Promise"),"."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"Object")," - returns ",Object(l.b)("inlineCode",{parentName:"p"},"{valid, errors}")," object"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"descriptor"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Object"))))),Object(l.b)("h3",{id:"infersource-headers-options--object"},"infer(source, headers, options) \u21d2 ",Object(l.b)("inlineCode",{parentName:"h3"},"Object")),Object(l.b)("p",null,"This function is async so it has to be used with ",Object(l.b)("inlineCode",{parentName:"p"},"await")," keyword or as a\n",Object(l.b)("inlineCode",{parentName:"p"},"Promise"),"."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),": ",Object(l.b)("inlineCode",{parentName:"p"},"Object")," - returns schema descriptor ",Object(l.b)("strong",{parentName:"p"},"Throws"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TableSchemaError")," raises any error occured in the\nprocess")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"source"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"List.\\<List\\>"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"headers"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"List.\\<string\\>")),Object(l.b)("td",{parentName:"tr",align:null},"list of headers")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"options"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Object")),Object(l.b)("td",{parentName:"tr",align:null},"any ",Object(l.b)("inlineCode",{parentName:"td"},"Table.load")," options")))),Object(l.b)("h2",{id:"contributing"},"Contributing"),Object(l.b)("p",null,"The project follows the ",Object(l.b)("a",{parentName:"p",href:"https://github.com/okfn/coding-standards"},"Open Knowledge International coding\nstandards"),". There are common\ncommands to work with the project.Recommended way to get started is to\ncreate, activate and load the library environment. To install package\nand development dependencies into active environment:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},'devtools::install_github("frictionlessdata/tableschema-r", dependencies = TRUE)\n')),Object(l.b)("p",null,"To make test:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"test_that(description, {\n  expect_equal(test, expected result)\n})\n")),Object(l.b)("p",null,"To run tests:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-r"},"devtools::test()\n")),Object(l.b)("p",null,"More detailed information about how to create and run tests you can find\nin ",Object(l.b)("a",{parentName:"p",href:"https://github.com/hadley/testthat"},"testthat package"),"."),Object(l.b)("h2",{id:"changelog---news"},"Changelog - News"),Object(l.b)("p",null,"In\n",Object(l.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/tableschema-r/blob/master/NEWS.md"},"NEWS.md"),"\ndescribed only breaking and the most important changes. The full\nchangelog could be found in nicely formatted\n",Object(l.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/tableschema-r/commits/master"},"commit"),"\nhistory."))}s.isMDXComponent=!0}}]);